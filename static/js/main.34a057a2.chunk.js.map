{"version":3,"sources":["Profile.tsx","Works.tsx","Links.tsx","jsm/shaders/CopyShader.js","jsm/postprocessing/Pass.js","jsm/postprocessing/ShaderPass.js","jsm/postprocessing/MaskPass.js","jsm/postprocessing/EffectComposer.js","jsm/postprocessing/RenderPass.js","jsm/shaders/LuminosityHighPassShader.js","Content.tsx","jsm/postprocessing/UnrealBloomPass.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["Profile","react_default","a","createElement","className","React","Component","worksStyle","height","Works","style","Links","href","CopyShader","uniforms","tDiffuse","value","opacity","vertexShader","join","fragmentShader","Pass","this","enabled","needsSwap","clear","renderToScreen","Object","assign","prototype","setSize","render","console","error","FullScreenQuad","camera","OrthographicCamera","geometry","PlaneBufferGeometry","material","_mesh","Mesh","defineProperty","get","set","renderer","ShaderPass","shader","textureID","call","undefined","ShaderMaterial","UniformsUtils","clone","defines","fsQuad","create","constructor","writeBuffer","readBuffer","texture","setRenderTarget","autoClearColor","autoClearDepth","autoClearStencil","MaskPass","scene","inverse","writeValue","clearValue","context","getContext","state","buffers","color","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","EQUAL","KEEP","ClearMaskPass","EffectComposer","renderTarget","parameters","minFilter","LinearFilter","magFilter","format","RGBAFormat","stencilBuffer","size","getSize","Vector2","_pixelRatio","getPixelRatio","_width","width","_height","WebGLRenderTarget","name","renderTarget1","renderTarget2","passes","copyPass","clock","Clock","swapBuffers","tmp","addPass","pass","push","insertPass","index","splice","isLastEnabledPass","passIndex","i","length","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","NOTEQUAL","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","RenderPass","overrideMaterial","clearColor","clearAlpha","clearDepth","oldClearColor","oldClearAlpha","oldAutoClear","autoClear","getClearColor","getHex","getClearAlpha","setClearColor","container","pointLight","composer","LuminosityHighPassShader","shaderID","luminosityThreshold","smoothWidth","defaultColor","Color","defaultOpacity","UnrealBloomPass","resolution","strength","radius","threshold","x","y","pars","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","Math","round","resy","renderTargetBright","generateMipmaps","renderTargetHorizonal","renderTargetVertical","highPassShader","highPassUniforms","materialHighPassFilter","separableBlurMaterials","kernelSizeArray","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomTintColors","Vector3","copyShader","copyUniforms","materialCopy","blending","AdditiveBlending","depthTest","depthWrite","transparent","basic","MeshBasicMaterial","copy","map","inputRenderTarget","BlurDirectionX","BlurDirectionY","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","direction","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","dirtTexture","bloomStrength","bloomFactors","bloomRadius","titlePad","window","innerWidth","scrollY","params","LAYER","NO_POSTPROCESS","BLOOM","Content","id","src_Profile_0","src_Works","src_Links","box","_this","defaultScrollY","boxes","document","getElementById","THREE","antialias","devicePixelRatio","innerHeight","toneMapping","appendChild","domElement","boxM","boxLines","_i","_boxes","rect","getBoundingClientRect","boxG","vertices","Float32Array","left","top","right","bottom","addAttribute","line","position","layers","works","Array","worksRect","origin","circleR","range","Work","w","wonderLine","animate","aspect","dist","tan","fov","PI","z","add","_i4","_boxLines","boxLine","work","d","dx","dy","floor","pos","setPosition","mesh","getTextureCircle","frontCircle","getFrontCircle","backCircle","getBackCircle","renderScene","bloomPass","requestAnimationFrame","addEventListener","forceUpdate","center","classCallCheck","eps","theta","r","points","mvR","dr","dtheta","rev","random","alive","min","cos","sin","setFromPoints","src","_this2","textureCircle","load","tex","geo","mat","point2D","getPoints","point3D","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","p","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","App","possibleConstructorReturn","getPrototypeOf","src_Content_0","Boolean","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34a057a2.chunk.js","sourcesContent":["import React from 'react';\nimport './Profile.css'\n\nclass Profile extends React.Component {\n  render() {\n    return (\n      <div className=\"text\">\n        <div className=\"title\">Profile</div>\n        <div className=\"detail\">\n          <div><b>Nocks_on</b>と申します。<b>のくそん</b>と読みます。</div>\n          <br />\n          <div>好きなこと:\n            <div>ゲーム、VRが好きです。今までの人生で一番好きなゲームは『カービィのエアライド』です。最近OculusQuestを買ってVRを楽しんでします。</div>\n          </div>\n          <br />\n          <div>やったこと: \n            <li>Webアプリ開発</li>\n            <li>短いゲーム開発</li>\n            <li>シェーダなどのビジュアルプログラミング</li>\n            <li>動画編集など</li>\n          </div>\n          <br />\n          <div>言語について:\n            <li>よく使う: C++、JavaScript</li>\n            <li>そこそこ使っている: GLSL</li>\n            <li>使える: Java, Python, Swift, Ruby, PHP, HTML/CSS</li>\n            <li>興味がある: Haskell</li>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Profile;","import React from 'react';\nimport './Profile.css'\n\nlet worksStyle : React.CSSProperties = {\n  height: '500px'\n}\n\nclass Works extends React.Component {\n  render() {\n    return (\n      <div className=\"text\">\n        <div className=\"title\">Works / Activities</div>\n        <div className=\"detail\" style={worksStyle}>\n          \n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Works;","import React from 'react';\nimport './Profile.css'\n\nclass Links extends React.Component {\n  render() {\n    return (\n      <div className=\"text\">\n        <div className=\"title\">Links</div>\n        <div className=\"detail\">\n          <li>Github: <a href=\"https://github.com/VacuumedOne\">VacuumedOne</a></li>\n          <li>Twitter: <a href=\"https://twitter.com/nocks_on\">のくそん</a></li>\n          <li>Shadertoy: <a href=\"https://www.shadertoy.com/profile?show=shaders\">Nocks_on</a></li>\n          <li>OpenProcessing: <a href=\"https://www.openprocessing.org/user/181939\">Nocks_on</a></li>\n          <li>はてなブログ: </li>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Links;","/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Full-screen textured quad shader\n */\n\n\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"opacity\":  { value: 1.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vUv = uv;\",\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform float opacity;\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vec4 texel = texture2D( tDiffuse, vUv );\",\n\t\t\t\"gl_FragColor = opacity * texel;\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { CopyShader };\n","import {\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tMesh\n} from \"three\";\n\nfunction Pass() {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n}\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { Pass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tShaderMaterial,\n\tUniformsUtils\n} from \"three\";\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar ShaderPass = function ( shader, textureID ) {\n\n\tPass.call( this );\n\n\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\n\n\tif ( shader instanceof ShaderMaterial ) {\n\n\t\tthis.uniforms = shader.uniforms;\n\n\t\tthis.material = shader;\n\n\t} else if ( shader ) {\n\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t}\n\n\tthis.fsQuad = new Pass.FullScreenQuad( this.material );\n\n};\n\nShaderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: ShaderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n} );\n\nexport { ShaderPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar MaskPass = function ( scene, camera ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.clear = true;\n\tthis.needsSwap = false;\n\n\tthis.inverse = false;\n\n};\n\nMaskPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: MaskPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar context = renderer.getContext();\n\t\tvar state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tvar writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n} );\n\n\nvar ClearMaskPass = function () {\n\n\tPass.call( this );\n\n\tthis.needsSwap = false;\n\n};\n\nClearMaskPass.prototype = Object.create( Pass.prototype );\n\nObject.assign( ClearMaskPass.prototype, {\n\n\trender: function ( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n} );\n\nexport { MaskPass, ClearMaskPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tClock,\n\tLinearFilter,\n\tMesh,\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tRGBAFormat,\n\tVector2,\n\tWebGLRenderTarget\n} from \"three\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"../postprocessing/ShaderPass.js\";\nimport { MaskPass } from \"../postprocessing/MaskPass.js\";\nimport { ClearMaskPass } from \"../postprocessing/MaskPass.js\";\n\nvar EffectComposer = function ( renderer, renderTarget ) {\n\n\tthis.renderer = renderer;\n\n\tif ( renderTarget === undefined ) {\n\n\t\tvar parameters = {\n\t\t\tminFilter: LinearFilter,\n\t\t\tmagFilter: LinearFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\tstencilBuffer: false\n\t\t};\n\n\t\tvar size = renderer.getSize( new Vector2() );\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\tthis._width = size.width;\n\t\tthis._height = size.height;\n\n\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t} else {\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = renderTarget.width;\n\t\tthis._height = renderTarget.height;\n\n\t}\n\n\tthis.renderTarget1 = renderTarget;\n\tthis.renderTarget2 = renderTarget.clone();\n\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\tthis.writeBuffer = this.renderTarget1;\n\tthis.readBuffer = this.renderTarget2;\n\n\tthis.renderToScreen = true;\n\n\tthis.passes = [];\n\n\t// dependencies\n\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t}\n\n\tif ( ShaderPass === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t}\n\n\tthis.copyPass = new ShaderPass( CopyShader );\n\n\tthis.clock = new Clock();\n\n};\n\nObject.assign( EffectComposer.prototype, {\n\n\tswapBuffers: function () {\n\n\t\tvar tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t},\n\n\taddPass: function ( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t},\n\n\tinsertPass: function ( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\n\t},\n\n\tisLastEnabledPass: function ( passIndex ) {\n\n\t\tfor ( var i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\trender: function ( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tvar maskActive = false;\n\n\t\tvar pass, i, il = this.passes.length;\n\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tpass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tvar context = this.renderer.getContext();\n\t\t\t\t\tvar stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t},\n\n\treset: function ( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tvar effectiveWidth = this._width * this._pixelRatio;\n\t\tvar effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t},\n\n\tsetPixelRatio: function ( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n} );\n\n\nvar Pass = function () {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n};\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { EffectComposer, Pass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.overrideMaterial = overrideMaterial;\n\n\tthis.clearColor = clearColor;\n\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\tthis.clear = true;\n\tthis.clearDepth = false;\n\tthis.needsSwap = false;\n\n};\n\nRenderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: RenderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\tvar oldClearColor, oldClearAlpha;\n\n\t\tif ( this.clearColor ) {\n\n\t\t\toldClearColor = renderer.getClearColor().getHex();\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = null;\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n} );\n\nexport { RenderPass };\n","/**\n * @author bhouston / http://clara.io/\n *\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nimport {\n\tColor\n} from \"three\";\n\nvar LuminosityHighPassShader = {\n\n\tshaderID: \"luminosityHighPass\",\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"luminosityThreshold\": { value: 1.0 },\n\t\t\"smoothWidth\": { value: 1.0 },\n\t\t\"defaultColor\": { value: new Color( 0x000000 ) },\n\t\t\"defaultOpacity\": { value: 0.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vUv = uv;\",\n\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join(\"\\n\"),\n\n\tfragmentShader: [\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform vec3 defaultColor;\",\n\t\t\"uniform float defaultOpacity;\",\n\t\t\"uniform float luminosityThreshold;\",\n\t\t\"uniform float smoothWidth;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vec4 texel = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\"vec3 luma = vec3( 0.299, 0.587, 0.114 );\",\n\n\t\t\t\"float v = dot( texel.xyz, luma );\",\n\n\t\t\t\"vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\",\n\n\t\t\t\"float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\",\n\n\t\t\t\"gl_FragColor = mix( outputColor, texel, alpha );\",\n\n\t\t\"}\"\n\n\t].join(\"\\n\")\n\n};\n\nexport { LuminosityHighPassShader };\n","import React from 'react';\nimport Profile from './Profile';\nimport Works from './Works';\nimport Links from './Links';\nimport './Content.css';\n\nimport * as THREE from 'three';\n\nimport { EffectComposer } from './jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from './jsm/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from './jsm/postprocessing/UnrealBloomPass.js';\n\ninterface BloomParam {\n  exposure: number,\n  bloomStrength: number,\n  bloomThreshold: number,\n  bloomRadius: number\n}\n\nlet container : HTMLElement | null;\nlet scene : THREE.Scene;\nlet pointLight : THREE.PointLight;\nlet renderer : THREE.WebGLRenderer;\nlet camera : THREE.PerspectiveCamera;\nlet composer : EffectComposer;\n\n//color\nlet rime : number = 0x00FF00;\n\n//wonderLine\nlet wNum : number = 5;\nlet wonderStart : boolean = false;\n\n//works\nlet workN = 3;\nlet circleR = 100;\nlet titlePad = (window.innerWidth <= 600) ? 150 : 75; //[Works/Activities]の文字分のパディング\nlet pad = circleR + 50;\n\n\n//scroll\nlet scrollY = 0;\n\nlet params : BloomParam = {\n  exposure: 1,\n  bloomStrength: 2,\n  bloomThreshold: 0,\n  bloomRadius: 0\n};\n\nlet LAYER = {\n  NO_POSTPROCESS: 0,\n  BLOOM: 1\n};\n\nclass Content extends React.Component {\n  render() {\n    return (\n      <div id=\"content\">\n        <div className=\"layer1\">\n          <div id=\"background\"></div>\n        </div>\n        <div className=\"layer2\">\n          <div className=\"header\">Portfolio / Nocks_on</div>\n          <div className=\"body\">\n            <div className=\"item\" id=\"box1\">\n              <Profile />\n            </div>\n            <div className=\"item\" id=\"box2\">\n              <Works />\n            </div>\n            <div className=\"item\" id=\"box3\">\n              <Links />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n  componentDidMount() {\n    let defaultScrollY = window.scrollY;\n    let boxes : HTMLElement[] = [];\n    let box : HTMLElement | null;\n    for (let i = 1; i <= 3; i++) {\n      box = document.getElementById('box' + i);\n      if (box !== null) {\n        boxes.push(box);\n      }\n    }\n    if (boxes.length !== 3) {\n      return;\n    }\n\n    container = document.getElementById('background');\n    if (container == null) {\n      return;\n    }\n\n    renderer = new THREE.WebGLRenderer( {antialias: true} );\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.toneMapping = THREE.ReinhardToneMapping;\n    renderer.autoClear = false;\n    container.appendChild( renderer.domElement );\n\n    //Boxes\n    let boxM : THREE.LineBasicMaterial = new THREE.LineBasicMaterial( {color: rime} );\n    let boxLines : THREE.Line[] = [];\n    for (let box of boxes) {\n      let rect : ClientRect | DOMRect = box.getBoundingClientRect();\n      let boxG : THREE.BufferGeometry = new THREE.BufferGeometry();\n      let vertices : Float32Array = new Float32Array([\n        rect.left, -rect.top, 0,\n        rect.right, -rect.top, 0,\n        rect.right, -rect.bottom, 0,\n        rect.left, -rect.bottom, 0,\n        rect.left, -rect.top, 0,\n      ]);\n      boxG.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\n      let line : THREE.Line = new THREE.Line(boxG, boxM);\n      line.position.x = -window.innerWidth/2;\n      line.position.y = window.innerHeight/2 - defaultScrollY;\n      line.layers.set(LAYER.BLOOM);\n      boxLines.push(line);\n    }\n\n    //Works\n    let works : (Work | undefined)[] = new Array(workN);\n    let worksRect : ClientRect | DOMRect = boxes[1].getBoundingClientRect();\n    let origin : THREE.Vector3 = new THREE.Vector3(\n      -window.innerWidth/2 + worksRect.left + pad,\n      window.innerHeight/2 - worksRect.top - defaultScrollY - pad - titlePad,\n      0);\n    let range : number = worksRect.width - 2 * pad;\n    let step : number = 300;\n\n    for(let i = 0; i <= workN; i++) {\n      works[i] = new Work('texture/work' + i + '.png', circleR, rime);\n    }\n\n    //wonder\n    let w : wonderLine[] = [];\n    for (let i = 0; i < wNum; i++) {\n      w.push(new wonderLine(new THREE.Vector2(0, 0), rime));\n    }\n\n    const animate = () => {\n      scrollY = window.scrollY;\n      scene = new THREE.Scene();\n\n      let fov : number = 60;\n      let aspect : number = window.innerWidth / window.innerHeight;\n      let dist : number = (window.innerHeight/2) / Math.tan((fov/2)*Math.PI/180);\n      camera = new THREE.PerspectiveCamera(fov, aspect, 0.1, 1000);\n      camera.position.z = dist;\n      camera.position.y = -scrollY;\n      scene.add(camera);\n      \n      scene.add( new THREE.AmbientLight(0x404040) );\n\n      pointLight = new THREE.PointLight(0xffffff, 1);\n      camera.add(pointLight);\n\n      for (let boxLine of boxLines) {\n        scene.add(boxLine);\n      }\n\n      for (let i = 0; i < workN; i++) {\n        let work : Work | undefined = works[i];\n        if (work !== undefined) {\n          let d : number = i * step;\n          let dx : number = (d % range);\n          let dy : number = i * circleR + Math.floor(d / range) * circleR;\n          let pos : THREE.Vector3 = new THREE.Vector3(origin.x + dx, origin.y - dy, 0);\n          work.setPosition(pos);\n          let mesh : THREE.Mesh | null = work.getTextureCircle();\n          let frontCircle : THREE.Line = work.getFrontCircle();\n          let backCircle : THREE.Line = work.getBackCircle();\n          scene.add(backCircle);\n          if (mesh !== null) {\n            scene.add(mesh);\n          }\n          scene.add(frontCircle);\n        }\n      }\n\n      if (wonderStart) {\n        for (let i = 0; i < wNum; i++) {\n          w[i].update();\n          scene.add(w[i].getLine());\n        }\n      }\n\n      //Post Process\n      var renderScene = new RenderPass( scene, camera );\n      var bloomPass = new UnrealBloomPass( new THREE.Vector2( window.innerWidth, window.innerHeight ), 1.5, 0.4, 0.85 );\n      bloomPass.threshold = params.bloomThreshold;\n      bloomPass.strength = params.bloomStrength;\n      bloomPass.radius = params.bloomRadius;\n\n      composer = new EffectComposer( renderer );\n      composer.addPass( renderScene );\n      composer.addPass( bloomPass );\n\n      requestAnimationFrame(animate);\n\n      camera.layers.set(LAYER.BLOOM);\n      composer.render();\n      renderer.clearDepth();\n      camera.layers.set(LAYER.NO_POSTPROCESS);\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    const onWindowResize = () => {\n      this.forceUpdate();\n    }\n\n    window.addEventListener('resize', onWindowResize, false);\n  }\n}\n\nclass wonderLine {\n  eps : number = 0.0001;\n  center : THREE.Vector2;\n  color : number;\n  theta: number;\n  r : number;\n  points : THREE.Vector3[] = [];\n  mvR : boolean;\n  dr : number = 0;\n  dtheta : number = 0;\n  rev : number = (Math.random() > 0.5)?-1:1;\n  alive: boolean = true;\n  constructor(center : THREE.Vector2, color: number) {\n    this.center = center;\n    this.color = color;\n    this.theta = Math.PI*2*Math.random();\n    this.r = 0;\n    this.points.push(new THREE.Vector3(this.center.x, this.center.y, 0));\n    this.mvR = true;\n    this.dr = 0.5 + Math.random();\n  }\n  update() : void {\n    if (!this.alive) {\n      return;\n    } else {\n      if (this.r > 50) {\n        this.alive = false;\n      }\n    }\n    if (this.mvR) {\n      if (this.dr <= this.eps) {\n        this.mvR = !this.mvR;\n        this.dtheta = Math.PI/8 + Math.PI*Math.random();\n      } else {\n        let d = Math.min(this.dr, 0.2);\n        this.dr -= d;\n        this.r += d;\n        this.points.push(new THREE.Vector3(\n          this.center.x + this.r*Math.cos(this.theta), \n          this.center.y + this.r*Math.sin(this.theta), \n          0));\n      }\n    } else {\n      if (this.dtheta <= this.eps) {\n        this.mvR = !this.mvR;\n        this.dr = 0.5 + Math.random();\n      } else {\n        let d = Math.min(this.dtheta, Math.PI/100 * this.r);\n        this.dtheta -= d;\n        this.theta += d*this.rev;\n        this.points.push(new THREE.Vector3(\n          this.center.x + this.r*Math.cos(this.theta), \n          this.center.y + this.r*Math.sin(this.theta), \n          0));\n      }\n    }\n  }\n  getLine() : THREE.Line {\n    let geometry : THREE.BufferGeometry = new THREE.BufferGeometry().setFromPoints(this.points);\n    let material : THREE.Material = new THREE.LineBasicMaterial( {color: this.color} );\n    let line : THREE.Line = new THREE.Line(geometry, material);\n    return line\n  }\n}\n\nclass Work {\n  texture : THREE.Texture | undefined;\n  textureCircle : THREE.Mesh | undefined;\n  backCircle : THREE.Line;\n  frontCircle : THREE.Line;\n  position : THREE.Vector3 = new THREE.Vector3(0,0,0);\n  constructor(src : string, radius : number, color: number) {\n    //set texture circle\n    {\n      new THREE.TextureLoader().load(src, (tex) => {\n        let geo : THREE.CircleGeometry = new THREE.CircleGeometry(radius, 60);\n        let mat : THREE.MeshBasicMaterial = new THREE.MeshBasicMaterial( {map: tex } );\n        this.texture = tex;\n        this.textureCircle = new THREE.Mesh( geo, mat );\n      })\n    }\n\n    //set back circle\n    {\n      let arcGen : THREE.EllipseCurve = new THREE.EllipseCurve(\n        0, 0,\n        radius+10, radius+10,\n        0, Math.PI*2,\n        false,\n        0\n      );\n      let point2D : THREE.Vector2[] = arcGen.getPoints(60);\n      let point3D : THREE.Vector3[] = [];\n      for (let p of point2D) {\n        point3D.push(new THREE.Vector3(p.x, p.y, -5));\n      }\n      let geo : THREE.BufferGeometry = new THREE.BufferGeometry().setFromPoints(point3D);\n      let mat : THREE.Material = new THREE.LineBasicMaterial( {color: color} );\n      this.backCircle = new THREE.Line( geo, mat );\n      this.backCircle.layers.set(LAYER.BLOOM);\n    }\n\n    //set front circle\n    {\n      let arcGen : THREE.EllipseCurve = new THREE.EllipseCurve(\n        0, 0,\n        radius-10, radius-10,\n        0, Math.PI,\n        false,\n        0\n      );\n      let point2D : THREE.Vector2[] = arcGen.getPoints(60);\n      let point3D : THREE.Vector3[] = [];\n      for (let p of point2D) {\n        point3D.push(new THREE.Vector3(p.x, p.y, 5));\n      }\n      let geo : THREE.BufferGeometry = new THREE.BufferGeometry().setFromPoints(point3D);\n      let mat : THREE.Material = new THREE.LineBasicMaterial( {color: color} );\n      this.frontCircle = new THREE.Line( geo, mat );\n      this.frontCircle.layers.set(LAYER.BLOOM);\n    }\n  }\n  getTextureCircle() : THREE.Mesh | null {\n    if (this.textureCircle !== undefined) {\n      this.textureCircle.position.x = this.position.x;\n      this.textureCircle.position.y = this.position.y;\n      this.textureCircle.position.z = this.position.z;\n      return this.textureCircle;\n    } else {\n      return null;\n    }\n  }\n  getBackCircle() : THREE.Line {\n    this.backCircle.position.x = this.position.x;\n    this.backCircle.position.y = this.position.y;\n    this.backCircle.position.z = this.position.z;\n    return this.backCircle;\n  }\n  getFrontCircle() : THREE.Line {\n    this.frontCircle.position.x = this.position.x;\n    this.frontCircle.position.y = this.position.y;\n    this.frontCircle.position.z = this.position.z;\n    return this.frontCircle;\n  }\n  setPosition(position : THREE.Vector3) {\n    this.position = position;\n  }\n  update() {\n\n  }\n}\n\nexport default Content;","/**\n * @author spidersharma / http://eduperiment.com/\n *\n * Inspired from Unreal Engine\n * https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\n */\n\nimport {\n\tAdditiveBlending,\n\tColor,\n\tLinearFilter,\n\tMeshBasicMaterial,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from \"three\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityHighPassShader } from \"../shaders/LuminosityHighPassShader.js\";\n\nvar UnrealBloomPass = function ( resolution, strength, radius, threshold ) {\n\n\tPass.call( this );\n\n\tthis.strength = ( strength !== undefined ) ? strength : 1;\n\tthis.radius = radius;\n\tthis.threshold = threshold;\n\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\t// create color only once here, reuse it later inside the render function\n\tthis.clearColor = new Color( 0, 0, 0 );\n\n\t// render targets\n\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\tthis.renderTargetsHorizontal = [];\n\tthis.renderTargetsVertical = [];\n\tthis.nMips = 5;\n\tvar resx = Math.round( this.resolution.x / 2 );\n\tvar resy = Math.round( this.resolution.y / 2 );\n\n\tthis.renderTargetBright = new WebGLRenderTarget( resx, resy, pars );\n\tthis.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n\tthis.renderTargetBright.texture.generateMipmaps = false;\n\n\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\tvar renderTargetHorizonal = new WebGLRenderTarget( resx, resy, pars );\n\n\t\trenderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n\t\trenderTargetHorizonal.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetsHorizontal.push( renderTargetHorizonal );\n\n\t\tvar renderTargetVertical = new WebGLRenderTarget( resx, resy, pars );\n\n\t\trenderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n\t\trenderTargetVertical.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetsVertical.push( renderTargetVertical );\n\n\t\tresx = Math.round( resx / 2 );\n\n\t\tresy = Math.round( resy / 2 );\n\n\t}\n\n\t// luminosity high pass material\n\n\tif ( LuminosityHighPassShader === undefined )\n\t\tconsole.error( \"UnrealBloomPass relies on LuminosityHighPassShader\" );\n\n\tvar highPassShader = LuminosityHighPassShader;\n\tthis.highPassUniforms = UniformsUtils.clone( highPassShader.uniforms );\n\n\tthis.highPassUniforms[ \"luminosityThreshold\" ].value = threshold;\n\tthis.highPassUniforms[ \"smoothWidth\" ].value = 0.01;\n\n\tthis.materialHighPassFilter = new ShaderMaterial( {\n\t\tuniforms: this.highPassUniforms,\n\t\tvertexShader: highPassShader.vertexShader,\n\t\tfragmentShader: highPassShader.fragmentShader,\n\t\tdefines: {}\n\t} );\n\n\t// Gaussian Blur Materials\n\tthis.separableBlurMaterials = [];\n\tvar kernelSizeArray = [ 3, 5, 7, 9, 11 ];\n\tvar resx = Math.round( this.resolution.x / 2 );\n\tvar resy = Math.round( this.resolution.y / 2 );\n\n\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\tthis.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );\n\n\t\tthis.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new Vector2( resx, resy );\n\n\t\tresx = Math.round( resx / 2 );\n\n\t\tresy = Math.round( resy / 2 );\n\n\t}\n\n\t// Composite material\n\tthis.compositeMaterial = this.getCompositeMaterial( this.nMips );\n\tthis.compositeMaterial.uniforms[ \"blurTexture1\" ].value = this.renderTargetsVertical[ 0 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture2\" ].value = this.renderTargetsVertical[ 1 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture3\" ].value = this.renderTargetsVertical[ 2 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture4\" ].value = this.renderTargetsVertical[ 3 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture5\" ].value = this.renderTargetsVertical[ 4 ].texture;\n\tthis.compositeMaterial.uniforms[ \"bloomStrength\" ].value = strength;\n\tthis.compositeMaterial.uniforms[ \"bloomRadius\" ].value = 0.1;\n\tthis.compositeMaterial.needsUpdate = true;\n\n\tvar bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\n\tthis.compositeMaterial.uniforms[ \"bloomFactors\" ].value = bloomFactors;\n\tthis.bloomTintColors = [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ),\n\t\t\t\t\t\t\t new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ];\n\tthis.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\n\n\t// copy material\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( \"UnrealBloomPass relies on CopyShader\" );\n\n\t}\n\n\tvar copyShader = CopyShader;\n\n\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\tthis.copyUniforms[ \"opacity\" ].value = 1.0;\n\n\tthis.materialCopy = new ShaderMaterial( {\n\t\tuniforms: this.copyUniforms,\n\t\tvertexShader: copyShader.vertexShader,\n\t\tfragmentShader: copyShader.fragmentShader,\n\t\tblending: AdditiveBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\ttransparent: true\n\t} );\n\n\tthis.enabled = true;\n\tthis.needsSwap = false;\n\n\tthis.oldClearColor = new Color();\n\tthis.oldClearAlpha = 1;\n\n\tthis.basic = new MeshBasicMaterial();\n\n\tthis.fsQuad = new Pass.FullScreenQuad( null );\n\n};\n\nUnrealBloomPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: UnrealBloomPass,\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( var i = 0; i < this.renderTargetsVertical.length; i ++ ) {\n\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\n\n\t\t}\n\n\t\tthis.renderTargetBright.dispose();\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tvar resx = Math.round( width / 2 );\n\t\tvar resy = Math.round( height / 2 );\n\n\t\tthis.renderTargetBright.setSize( resx, resy );\n\n\t\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new Vector2( resx, resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t},\n\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tthis.oldClearColor.copy( renderer.getClearColor() );\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor( this.clearColor, 0 );\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render input to screen\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.basic;\n\t\t\tthis.basic.map = readBuffer.texture;\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// 1. Extract Bright Areas\n\n\t\tthis.highPassUniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n\t\tthis.highPassUniforms[ \"luminosityThreshold\" ].value = this.threshold;\n\t\tthis.fsQuad.material = this.materialHighPassFilter;\n\n\t\trenderer.setRenderTarget( this.renderTargetBright );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// 2. Blur All the mips progressively\n\n\t\tvar inputRenderTarget = this.renderTargetBright;\n\n\t\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.fsQuad.material = this.separableBlurMaterials[ i ];\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = inputRenderTarget.texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = UnrealBloomPass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = this.renderTargetsHorizontal[ i ].texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = UnrealBloomPass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\n\n\t\t}\n\n\t\t// Composite All the mips\n\n\t\tthis.fsQuad.material = this.compositeMaterial;\n\t\tthis.compositeMaterial.uniforms[ \"bloomStrength\" ].value = this.strength;\n\t\tthis.compositeMaterial.uniforms[ \"bloomRadius\" ].value = this.radius;\n\t\tthis.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\n\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Blend it additively over the input texture\n\n\t\tthis.fsQuad.material = this.materialCopy;\n\t\tthis.copyUniforms[ \"tDiffuse\" ].value = this.renderTargetsHorizontal[ 0 ].texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Restore renderer settings\n\n\t\trenderer.setClearColor( this.oldClearColor, this.oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t},\n\n\tgetSeperableBlurMaterial: function ( kernelRadius ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t\"KERNEL_RADIUS\": kernelRadius,\n\t\t\t\t\"SIGMA\": kernelRadius\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"colorTexture\": { value: null },\n\t\t\t\t\"texSize\": { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t\"direction\": { value: new Vector2( 0.5, 0.5 ) }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"#include <common>\\\n\t\t\t\tvarying vec2 vUv;\\n\\\n\t\t\t\tuniform sampler2D colorTexture;\\n\\\n\t\t\t\tuniform vec2 texSize;\\\n\t\t\t\tuniform vec2 direction;\\\n\t\t\t\t\\\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\n\t\t\t\t}\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\n\t\t\t\t\tfloat fSigma = float(SIGMA);\\\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\\\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\\\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\\\n\t\t\t\t\t\tfloat x = float(i);\\\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\\\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\\\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\\\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\\\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\\\n\t\t\t\t\t\tweightSum += 2.0 * w;\\\n\t\t\t\t\t}\\\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\\n\\\n\t\t\t\t}\"\n\t\t} );\n\n\t},\n\n\tgetCompositeMaterial: function ( nMips ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t\"NUM_MIPS\": nMips\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"blurTexture1\": { value: null },\n\t\t\t\t\"blurTexture2\": { value: null },\n\t\t\t\t\"blurTexture3\": { value: null },\n\t\t\t\t\"blurTexture4\": { value: null },\n\t\t\t\t\"blurTexture5\": { value: null },\n\t\t\t\t\"dirtTexture\": { value: null },\n\t\t\t\t\"bloomStrength\": { value: 1.0 },\n\t\t\t\t\"bloomFactors\": { value: null },\n\t\t\t\t\"bloomTintColors\": { value: null },\n\t\t\t\t\"bloomRadius\": { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"varying vec2 vUv;\\\n\t\t\t\tuniform sampler2D blurTexture1;\\\n\t\t\t\tuniform sampler2D blurTexture2;\\\n\t\t\t\tuniform sampler2D blurTexture3;\\\n\t\t\t\tuniform sampler2D blurTexture4;\\\n\t\t\t\tuniform sampler2D blurTexture5;\\\n\t\t\t\tuniform sampler2D dirtTexture;\\\n\t\t\t\tuniform float bloomStrength;\\\n\t\t\t\tuniform float bloomRadius;\\\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\\\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\\\n\t\t\t\t\\\n\t\t\t\tfloat lerpBloomFactor(const in float factor) { \\\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\\\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\\\n\t\t\t\t}\\\n\t\t\t\t\\\n\t\t\t\tvoid main() {\\\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\\\n\t\t\t\t}\"\n\t\t} );\n\n\t}\n\n} );\n\nUnrealBloomPass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nUnrealBloomPass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { UnrealBloomPass };\n","import React from 'react';\nimport './App.css';\n// import Text from './Text';\nimport Loading from './Loading';\nimport Content from './Content';\n// import Background from './Background';\n\ninterface AppState {\n  boxes : HTMLElement[]\n  scrollY : number\n}\n\nclass App extends React.Component <{}, AppState> {\n  constructor() {\n    super({});\n    this.state = {\n      boxes: [],\n      scrollY : 0\n    };\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Content />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}