{"version":3,"sources":["Profile.tsx","Works.tsx","Links.tsx","WorksDialog.tsx","jsm/shaders/CopyShader.js","jsm/postprocessing/Pass.js","jsm/postprocessing/ShaderPass.js","jsm/postprocessing/MaskPass.js","jsm/postprocessing/EffectComposer.js","jsm/postprocessing/RenderPass.js","jsm/shaders/LuminosityHighPassShader.js","Content.tsx","jsm/postprocessing/UnrealBloomPass.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["Profile","react_default","a","createElement","className","React","Component","Works","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","height","style","Links","href","WorksDialog","i","DialogTitle","contents","title","DialogContent","src","img","text","Dialog","open","isDialogOpen","onClose","handleClose","content","renderContent","Button","onClick","color","CopyShader","uniforms","tDiffuse","value","opacity","vertexShader","join","fragmentShader","Pass","enabled","needsSwap","clear","renderToScreen","assign","prototype","setSize","render","error","FullScreenQuad","camera","OrthographicCamera","geometry","PlaneBufferGeometry","material","_mesh","Mesh","defineProperty","get","set","renderer","ShaderPass","shader","textureID","undefined","ShaderMaterial","UniformsUtils","clone","defines","fsQuad","create","constructor","writeBuffer","readBuffer","texture","setRenderTarget","autoClearColor","autoClearDepth","autoClearStencil","MaskPass","scene","inverse","writeValue","clearValue","context","getContext","state","buffers","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","EQUAL","KEEP","ClearMaskPass","EffectComposer","renderTarget","parameters","minFilter","LinearFilter","magFilter","format","RGBAFormat","stencilBuffer","size","getSize","Vector2","_pixelRatio","getPixelRatio","_width","width","_height","WebGLRenderTarget","name","renderTarget1","renderTarget2","passes","copyPass","clock","Clock","swapBuffers","tmp","addPass","pass","push","insertPass","index","splice","isLastEnabledPass","passIndex","length","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","NOTEQUAL","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","RenderPass","overrideMaterial","clearColor","clearAlpha","clearDepth","oldClearColor","oldClearAlpha","oldAutoClear","autoClear","getClearColor","getHex","getClearAlpha","setClearColor","container","LuminosityHighPassShader","shaderID","luminosityThreshold","smoothWidth","defaultColor","Color","defaultOpacity","UnrealBloomPass","resolution","strength","radius","threshold","x","y","pars","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","Math","round","resy","renderTargetBright","generateMipmaps","renderTargetHorizonal","renderTargetVertical","highPassShader","highPassUniforms","materialHighPassFilter","separableBlurMaterials","kernelSizeArray","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomTintColors","Vector3","copyShader","copyUniforms","materialCopy","blending","AdditiveBlending","depthTest","depthWrite","transparent","basic","MeshBasicMaterial","copy","map","inputRenderTarget","BlurDirectionX","BlurDirectionY","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","direction","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","dirtTexture","bloomStrength","bloomFactors","bloomRadius","mouse","THREE","rime","workN","circleR","titlePad","window","innerWidth","pad","step","params","exposure","bloomThreshold","LAYER","PLANE","BLOOM","Content","_this","handleDialogClose","setState","prevState","dialogContent","workBoxHeight","componentDidMount","init","componentDidUpdate","box","defaultScrollY","scrollY","boxes","document","getElementById","antialias","devicePixelRatio","innerHeight","toneMapping","appendChild","domElement","background","aspect","dist","tan","fov","PI","position","z","load","tex","wrapS","wrapT","repeat","mat","SpriteMaterial","scale","workGroup","boxM","linewidth","boxLines","_i","_boxes","rect","getBoundingClientRect","boxG","vertices","Float32Array","left","top","right","bottom","addAttribute","line","layers","works","Array","worksRect","origin","range","d","dx","dy","floor","pos","Work","animate","lookAt","add","work","update","group","getObject","renderScene","bloomPass","requestAnimationFrame","addEventListener","e","updateProjectionMatrix","preventDefault","clientX","clientY","sqrt","pow","getRadius","expand","shrink","_loop","id","src_Profile_0","src_Works","src_Links","src_WorksDialog","_this2","textureCircle","backCircle","frontCircle","backDiff","defaultRadius","scale_t","setPosition","geo","point2D","getPoints","point3D","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","p","err","return","setFromPoints","obj","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","arc","dr","points","cos","sin","getTextureScale","getCircleScale","mesh","getTextureCircle","getFrontCircle","getBackCircle","min","rotateZ","SCALE_MAX","SCALE_MIN","App","src_Content_0","Boolean","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54e5f99a.chunk.js","sourcesContent":["import React from 'react';\nimport './Profile.css'\n\nclass Profile extends React.Component {\n  render() {\n    return (\n      <div className=\"text\">\n        <div className=\"title\">Profile</div>\n        <div className=\"detail\">\n          <div><b>Nocks_on</b>と申します。<b>のくそん</b>と読みます。</div>\n          <br />\n          <div>好きなこと:\n            <div>ゲーム、VRが好きです。今までの人生で一番好きなゲームは『カービィのエアライド』です。最近OculusQuestを買ってVRを楽しんでします。</div>\n          </div>\n          <br />\n          <div>やったこと: \n            <li>Webアプリ開発</li>\n            <li>短いゲーム開発</li>\n            <li>シェーダなどのビジュアルプログラミング</li>\n            <li>動画編集など</li>\n          </div>\n          <br />\n          <div>言語について:\n            <li>よく使う: C++、JavaScript</li>\n            <li>そこそこ使っている: GLSL</li>\n            <li>使える: Java, Python, Swift, Ruby, PHP, HTML/CSS</li>\n            <li>興味がある: Haskell</li>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Profile;","import React from 'react';\nimport './Profile.css'\n\ninterface WorksProps {\n  height : number\n}\n\nclass Works extends React.Component<WorksProps, {}> {\n  constructor(props : WorksProps) {\n    super(props);\n  }\n  componentDidUpdate() {\n    console.log('works updated!');\n    console.log(this.props.height);\n  }\n  render() {\n    return (\n      <div className=\"text\">\n        <div className=\"title\">Works / Activities</div>\n        <div className=\"detail\" style={{height: this.props.height}}>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Works;","import React from 'react';\nimport './Profile.css'\n\nclass Links extends React.Component {\n  render() {\n    return (\n      <div className=\"text\">\n        <div className=\"title\">Links</div>\n        <div className=\"detail\">\n          <li>Github: <a href=\"https://github.com/VacuumedOne\">VacuumedOne</a></li>\n          <li>Twitter: <a href=\"https://twitter.com/nocks_on\">のくそん</a></li>\n          <li>Shadertoy: <a href=\"https://www.shadertoy.com/profile?show=shaders\">Nocks_on</a></li>\n          <li>OpenProcessing: <a href=\"https://www.openprocessing.org/user/181939\">Nocks_on</a></li>\n          <li>はてなブログ: </li>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Links;","import React from 'react';\n\nimport { Dialog, DialogTitle, DialogContent, Button } from '@material-ui/core';\n\ninterface WDProps {\n  isDialogOpen : boolean,\n  content : number,\n  handleClose() : void\n}\n\nclass WorksDialog extends React.Component<WDProps> {\n  constructor(props : WDProps) {\n    super(props);\n  }\n  renderContent(i : number) {\n    return (\n      <div>\n        <DialogTitle>{contents[i].title}</DialogTitle>\n        <DialogContent>\n          <img src={contents[i].img}></img>\n          <div>{contents[i].text}</div>\n        </DialogContent>\n      </div>\n    )\n  }\n  render() {\n    return (\n      <Dialog open={this.props.isDialogOpen} onClose={this.props.handleClose}>\n        {(this.props.content !== -1) ? this.renderContent(this.props.content) : null}\n        <Button onClick={this.props.handleClose} color=\"primary\">Close</Button>\n      </Dialog>\n    )\n  }\n}\n\ninterface ContentText {\n  title : string,\n  img : string,\n  text : JSX.Element\n}\n\nconst contents : ContentText[] = [\n  {\n    title : 'RGB',\n    img : 'images/work0.png',\n    text : (<div>JavaScript始めたての頃に3時間jamで制作した単発ゲームです。素のHTMLCanvasで作られています。<a href=\"https://vacuumedone.github.io/RGB/\">こちらより</a></div>)\n  },\n  {\n    title : 'つばくログ',\n    img : 'images/work1.png',\n    text : (<div>所属していたボート部向けに制作した「記録とフィードバックを促すアプリ」です。制作には大学3年の秋から大学4年の春までかかり、長い期間の個人開発となりました。Vue.js+Node.js製です。TypeScriptを使っていなかったので辛かった...。外部に公開していません。</div>)\n  },\n  {\n    title : 'GroP',\n    img : 'images/work2.png',\n    text : (<div>Webアプリ開発の授業の中で5人チームで作ったアプリです。自分にとっては初めてのチーム開発でした。タスクを「木を育てる」ことに重ね合わせて視覚的に楽しそうにしたTODOアプリです。</div>)\n  },\n  {\n    title : 'Transmissions',\n    img : 'images/work3.png',\n    text : (<div>Shaderが魔法みたいだなぁと憧れて作ったものです。GLSLで書いてshadertoyに投稿しました。レイマーチングを使えば無限の奥行きをいい感じに見せることができて楽しいですね。距離関数やフォールディングなどの技巧が必要で、まだまだ勉強の必要を感じます。<a href=\"https://www.shadertoy.com/view/3l2SRh\">こちらから</a></div>)\n  }\n] \n\nexport default WorksDialog;","/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Full-screen textured quad shader\n */\n\n\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"opacity\":  { value: 1.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vUv = uv;\",\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform float opacity;\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vec4 texel = texture2D( tDiffuse, vUv );\",\n\t\t\t\"gl_FragColor = opacity * texel;\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { CopyShader };\n","import {\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tMesh\n} from \"three\";\n\nfunction Pass() {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n}\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { Pass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tShaderMaterial,\n\tUniformsUtils\n} from \"three\";\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar ShaderPass = function ( shader, textureID ) {\n\n\tPass.call( this );\n\n\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\n\n\tif ( shader instanceof ShaderMaterial ) {\n\n\t\tthis.uniforms = shader.uniforms;\n\n\t\tthis.material = shader;\n\n\t} else if ( shader ) {\n\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t}\n\n\tthis.fsQuad = new Pass.FullScreenQuad( this.material );\n\n};\n\nShaderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: ShaderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n} );\n\nexport { ShaderPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar MaskPass = function ( scene, camera ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.clear = true;\n\tthis.needsSwap = false;\n\n\tthis.inverse = false;\n\n};\n\nMaskPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: MaskPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar context = renderer.getContext();\n\t\tvar state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tvar writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n} );\n\n\nvar ClearMaskPass = function () {\n\n\tPass.call( this );\n\n\tthis.needsSwap = false;\n\n};\n\nClearMaskPass.prototype = Object.create( Pass.prototype );\n\nObject.assign( ClearMaskPass.prototype, {\n\n\trender: function ( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n} );\n\nexport { MaskPass, ClearMaskPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tClock,\n\tLinearFilter,\n\tMesh,\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tRGBAFormat,\n\tVector2,\n\tWebGLRenderTarget\n} from \"three\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"../postprocessing/ShaderPass.js\";\nimport { MaskPass } from \"../postprocessing/MaskPass.js\";\nimport { ClearMaskPass } from \"../postprocessing/MaskPass.js\";\n\nvar EffectComposer = function ( renderer, renderTarget ) {\n\n\tthis.renderer = renderer;\n\n\tif ( renderTarget === undefined ) {\n\n\t\tvar parameters = {\n\t\t\tminFilter: LinearFilter,\n\t\t\tmagFilter: LinearFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\tstencilBuffer: false\n\t\t};\n\n\t\tvar size = renderer.getSize( new Vector2() );\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\tthis._width = size.width;\n\t\tthis._height = size.height;\n\n\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t} else {\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = renderTarget.width;\n\t\tthis._height = renderTarget.height;\n\n\t}\n\n\tthis.renderTarget1 = renderTarget;\n\tthis.renderTarget2 = renderTarget.clone();\n\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\tthis.writeBuffer = this.renderTarget1;\n\tthis.readBuffer = this.renderTarget2;\n\n\tthis.renderToScreen = true;\n\n\tthis.passes = [];\n\n\t// dependencies\n\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t}\n\n\tif ( ShaderPass === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t}\n\n\tthis.copyPass = new ShaderPass( CopyShader );\n\n\tthis.clock = new Clock();\n\n};\n\nObject.assign( EffectComposer.prototype, {\n\n\tswapBuffers: function () {\n\n\t\tvar tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t},\n\n\taddPass: function ( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t},\n\n\tinsertPass: function ( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\n\t},\n\n\tisLastEnabledPass: function ( passIndex ) {\n\n\t\tfor ( var i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\trender: function ( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tvar maskActive = false;\n\n\t\tvar pass, i, il = this.passes.length;\n\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tpass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tvar context = this.renderer.getContext();\n\t\t\t\t\tvar stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t},\n\n\treset: function ( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tvar effectiveWidth = this._width * this._pixelRatio;\n\t\tvar effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t},\n\n\tsetPixelRatio: function ( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n} );\n\n\nvar Pass = function () {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n};\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { EffectComposer, Pass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.overrideMaterial = overrideMaterial;\n\n\tthis.clearColor = clearColor;\n\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\tthis.clear = true;\n\tthis.clearDepth = false;\n\tthis.needsSwap = false;\n\n};\n\nRenderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: RenderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\tvar oldClearColor, oldClearAlpha;\n\n\t\tif ( this.clearColor ) {\n\n\t\t\toldClearColor = renderer.getClearColor().getHex();\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = null;\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n} );\n\nexport { RenderPass };\n","/**\n * @author bhouston / http://clara.io/\n *\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nimport {\n\tColor\n} from \"three\";\n\nvar LuminosityHighPassShader = {\n\n\tshaderID: \"luminosityHighPass\",\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"luminosityThreshold\": { value: 1.0 },\n\t\t\"smoothWidth\": { value: 1.0 },\n\t\t\"defaultColor\": { value: new Color( 0x000000 ) },\n\t\t\"defaultOpacity\": { value: 0.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vUv = uv;\",\n\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join(\"\\n\"),\n\n\tfragmentShader: [\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform vec3 defaultColor;\",\n\t\t\"uniform float defaultOpacity;\",\n\t\t\"uniform float luminosityThreshold;\",\n\t\t\"uniform float smoothWidth;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vec4 texel = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\"vec3 luma = vec3( 0.299, 0.587, 0.114 );\",\n\n\t\t\t\"float v = dot( texel.xyz, luma );\",\n\n\t\t\t\"vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\",\n\n\t\t\t\"float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\",\n\n\t\t\t\"gl_FragColor = mix( outputColor, texel, alpha );\",\n\n\t\t\"}\"\n\n\t].join(\"\\n\")\n\n};\n\nexport { LuminosityHighPassShader };\n","import React from 'react';\nimport Profile from './Profile';\nimport Works from './Works';\nimport Links from './Links';\nimport WorksDialog from './WorksDialog'\nimport './Content.css';\n\nimport * as THREE from 'three';\n\nimport { EffectComposer } from './jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from './jsm/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from './jsm/postprocessing/UnrealBloomPass.js';\n\nimport { SpriteMaterial } from 'three';\n\ninterface ContentState {\n  isDialogOpen : boolean,\n  dialogContent : number,\n  workBoxHeight : number\n}\n\ninterface BloomParam {\n  exposure: number,\n  bloomStrength: number,\n  bloomThreshold: number,\n  bloomRadius: number\n}\n\nlet container : HTMLElement | null;\nlet scene : THREE.Scene;\n// let pointLight : THREE.PointLight;\nlet renderer : THREE.WebGLRenderer;\nlet camera : THREE.PerspectiveCamera;\nlet composer : EffectComposer;\nlet mouse : THREE.Vector3 = new THREE.Vector3(0,0,0);\n\n//color\nlet rime : number = 0x00FF00;\n\n//wonderLine\nlet wNum : number = 5;\nlet wonderStart : boolean = false;\n\n//works\nlet workN : number = 4;\nlet circleR : number = 100;\nlet titlePad : number = (window.innerWidth <= 600) ? 150 : 75; //[Works/Activities]の文字分のパディング\nlet pad : number = circleR + 50;\nlet step : number = 300;\n\n\nlet params : BloomParam = {\n  exposure: 1,\n  bloomStrength: 2,\n  bloomThreshold: 0,\n  bloomRadius: 0\n};\n\nlet LAYER = {\n  PLANE: 0,\n  BLOOM: 1\n};\n\nclass Content extends React.Component<{}, ContentState> {\n  constructor() {\n    super({});\n    this.state = {\n      isDialogOpen : false,\n      dialogContent : -1,\n      workBoxHeight : 500\n    }\n    // this.handleDialogClose = this.handleDialogClose.bind(this);\n  }\n  render() {\n    return (\n      <div id=\"content\">\n        <div className=\"layer1\">\n          <div id=\"background\"></div>\n        </div>\n        <div className=\"layer2\">\n          <div className=\"header\">Portfolio / Nocks_on</div>\n          <div className=\"body\">\n            <div className=\"item\" id=\"box1\">\n              <Profile />\n            </div>\n            <div className=\"item\" id=\"box2\">\n              <Works height={this.state.workBoxHeight}/>\n            </div>\n            <div className=\"item\" id=\"box3\">\n              <Links />\n            </div>\n          </div>\n          <WorksDialog isDialogOpen={this.state.isDialogOpen} content={this.state.dialogContent} handleClose={this.handleDialogClose}/>\n        </div>\n      </div>\n    )\n  }\n  handleDialogClose = () => {\n    this.setState((prevState) => {\n      return {\n        isDialogOpen : false,\n        dialogContent : -1,\n        workBoxHeight : prevState.workBoxHeight\n      };\n    });\n  }\n  componentDidMount = () => {\n    this.init();\n  }\n  componentDidUpdate = () => {\n    // this.init();\n  }\n  init = () => {\n    let defaultScrollY = window.scrollY;\n    let boxes : HTMLElement[] = [];\n    let box : HTMLElement | null;\n    for (let i = 1; i <= 3; i++) {\n      box = document.getElementById('box' + i);\n      if (box !== null) {\n        boxes.push(box);\n      }\n    }\n    if (boxes.length !== 3) {\n      return;\n    }\n\n    container = document.getElementById('background');\n    if (container == null) {\n      return;\n    }\n\n    //Renderer\n    renderer = new THREE.WebGLRenderer( {antialias: true} );\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.toneMapping = THREE.ReinhardToneMapping;\n    renderer.autoClear = false;\n    container.appendChild( renderer.domElement );\n\n    //Camera\n    let fov : number = 60;\n    let aspect : number = window.innerWidth / window.innerHeight;\n    let dist : number = (window.innerHeight/2) / Math.tan((fov/2)*Math.PI/180);\n    camera = new THREE.PerspectiveCamera(fov, aspect, 1, 1000);\n    camera.position.z = dist;\n\n    //Background Plane\n    let background : THREE.Sprite | null;\n    {\n      new THREE.TextureLoader().load('texture/background.png', (tex) => {\n        tex.wrapS = THREE.RepeatWrapping;\n        tex.wrapT = THREE.RepeatWrapping;\n        tex.repeat.set(10, 10);\n        let mat = new SpriteMaterial({\n          map: tex\n        });\n        background = new THREE.Sprite(mat);\n        background.scale.x = 10000;\n        background.scale.y = 10000;\n        background.position.z = -100;\n      });\n    }\n\n    //Boxes\n    let boxM : THREE.LineBasicMaterial = new THREE.LineBasicMaterial( {color: rime, linewidth: 10}, );\n    let boxLines : THREE.Line[] = [];\n    for (let box of boxes) {\n      let rect : ClientRect | DOMRect = box.getBoundingClientRect();\n      let boxG : THREE.BufferGeometry = new THREE.BufferGeometry();\n      let vertices : Float32Array = new Float32Array([\n        rect.left, -rect.top, 0,\n        rect.right, -rect.top, 0,\n        rect.right, -rect.bottom, 0,\n        rect.left, -rect.bottom, 0,\n        rect.left, -rect.top, 0,\n      ]);\n      boxG.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\n      let line : THREE.Line = new THREE.Line(boxG, boxM);\n      line.position.x = -window.innerWidth/2;\n      line.position.y = window.innerHeight/2 - defaultScrollY;\n      line.layers.set(LAYER.PLANE);\n      boxLines.push(line);\n    }\n\n    //Works\n    let workGroup : THREE.Object3D;\n    let works : (Work | undefined)[] = new Array(workN);\n    let worksRect : ClientRect | DOMRect = boxes[1].getBoundingClientRect();\n    let origin : THREE.Vector3 = new THREE.Vector3(\n      -window.innerWidth/2 + worksRect.left + pad,\n      window.innerHeight/2 - worksRect.top - defaultScrollY - pad - titlePad,\n      0);\n    let range : number = worksRect.width - 2 * pad;\n    \n    for(let i = 0; i < workN; i++) {\n      let d : number = i * step;\n      let dx : number = (d % range);\n      let dy : number = i * 2 * circleR + Math.floor(d / range) * circleR;\n      let pos : THREE.Vector3 = new THREE.Vector3(origin.x + dx, origin.y - dy, 0);\n      works[i] = new Work('texture/work' + i + '.png', pos, circleR, rime);\n    }\n    this.setState((prevState) => {\n      return {\n        isDialogOpen : prevState.isDialogOpen,\n        workBoxHeight : (workN-1) * 2 * circleR + Math.floor((workN-1) * step / range) * circleR + circleR + pad\n      };\n    });\n\n    //wonder\n    // let w : wonderLine[] = [];\n    // for (let i = 0; i < wNum; i++) {\n    //   w.push(new wonderLine(new THREE.Vector2(0, 0), rime));\n    // }\n\n    // let spriteGroup : THREE.Group = new THREE.Group();\n    // let sprite1 : THREE.Sprite = new THREE.Sprite( new THREE.SpriteMaterial( {color: '#69f'} ));\n    // sprite1.scale.set(100, 100, 1);\n    // let sprite2 : THREE.Sprite = new THREE.Sprite( new THREE.SpriteMaterial( {color: '#69f'} ));\n    // sprite2.scale.set(200, 100, 1);\n    // sprite2.position.set(150, 150, 0);\n    // let g : THREE.Object3D = new THREE.Object3D();\n    // let sprite3 : THREE.Sprite = new THREE.Sprite( new THREE.SpriteMaterial( {color: '#69f'} ));\n    // sprite3.scale.set(50, 200, 1);\n    // sprite3.position.set(-150, -200, 0);\n    // spriteGroup.add(sprite1);\n    // spriteGroup.add(sprite2);\n    // g.add(sprite3);\n    // spriteGroup.add(g);\n\n    const animate = () => {\n      scene = new THREE.Scene();\n      // scene.background = new THREE.Color(0x111111);\n      camera.position.x = mouse.x/20;\n      camera.position.y = mouse.y/20 - window.scrollY;\n      camera.lookAt(0, -window.scrollY, 0);\n\n      // scene.add(camera);\n      \n      // scene.add( new THREE.AmbientLight(0x404040) );\n\n      // pointLight = new THREE.PointLight(0xffffff, 1);\n      // camera.add(pointLight);\n\n      if (background !== null) {\n        scene.add(background);\n      }\n\n      // for (let boxLine of boxLines) {\n      //   scene.add(boxLine);\n      // }\n\n      workGroup = new THREE.Object3D();\n      for (let i = 0; i < workN; i++) {\n        let work : Work | undefined = works[i];\n        if (work !== undefined) {\n          work.update();\n          let group : THREE.Object3D = work.getObject();\n          workGroup.add(group);\n        }\n      }\n      scene.add(workGroup);\n\n      // scene.add(spriteGroup);\n\n\n      //Post Process\n      var renderScene = new RenderPass( scene, camera );\n      var bloomPass = new UnrealBloomPass( new THREE.Vector2( window.innerWidth, window.innerHeight ), 1.5, 0.4, 0.85 );\n      bloomPass.threshold = params.bloomThreshold;\n      bloomPass.strength = params.bloomStrength;\n      bloomPass.radius = params.bloomRadius;\n\n      composer = new EffectComposer( renderer );\n      composer.addPass( renderScene );\n      // composer.addPass( bloomPass );\n\n      requestAnimationFrame(animate);\n\n      camera.layers.set(LAYER.PLANE);\n      renderer.render(scene, camera);\n      // renderer.clearDepth();\n      // camera.layers.set(LAYER.BLOOM);\n      // composer.render();\n    }\n    animate();\n\n    const onWindowResize = (e : UIEvent) => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n    window.addEventListener('resize', onWindowResize, false);\n\n    const onMouseMove = (e : MouseEvent) => {\n      e.preventDefault();\n      mouse.x = e.clientX - window.innerWidth/2;\n      mouse.y = -e.clientY + window.innerHeight/2;\n\n      for (let i = 0; i < workN; i++) {\n        let work : Work | undefined = works[i];\n        if (work !== undefined) {\n          let dist = Math.sqrt(\n            Math.pow(work.position.x - mouse.x, 2.0) +\n            Math.pow(work.position.y - mouse.y + window.scrollY, 2.0)\n          ) - work.getRadius();\n          if (dist < 0) {\n            work.expand();\n          } else {\n            work.shrink();\n          }\n        }\n      }\n    }\n    window.addEventListener('mousemove', onMouseMove, false);\n\n    const onClick = (e : MouseEvent) => {\n      if (!this.state.isDialogOpen) {\n        e.preventDefault();\n        mouse.x = e.clientX - window.innerWidth/2;\n        mouse.y = -e.clientY + window.innerHeight/2;\n  \n        for (let i = 0; i < workN; i++) {\n          let work : Work | undefined = works[i];\n          if (work !== undefined) {\n            let dist = Math.sqrt(\n              Math.pow(work.position.x - mouse.x, 2.0) +\n              Math.pow(work.position.y - mouse.y + window.scrollY, 2.0)\n            ) - work.getRadius();\n            if (dist < 0) {\n              this.setState((prevState) => {\n                return {\n                  isDialogOpen : true,\n                  dialogContent : i,\n                  workBoxHeight : prevState.workBoxHeight\n                }\n              })\n            }\n          }\n        }\n      }\n    }\n    window.addEventListener('click', onClick, false);\n  }\n}\n\nclass wonderLine {\n  eps : number = 0.0001;\n  center : THREE.Vector2;\n  color : number;\n  theta: number;\n  r : number;\n  points : THREE.Vector3[] = [];\n  mvR : boolean;\n  dr : number = 0;\n  dtheta : number = 0;\n  rev : number = (Math.random() > 0.5)?-1:1;\n  alive: boolean = true;\n  constructor(center : THREE.Vector2, color: number) {\n    this.center = center;\n    this.color = color;\n    this.theta = Math.PI*2*Math.random();\n    this.r = 0;\n    this.points.push(new THREE.Vector3(this.center.x, this.center.y, 0));\n    this.mvR = true;\n    this.dr = 0.5 + Math.random();\n  }\n  update() : void {\n    if (!this.alive) {\n      return;\n    } else {\n      if (this.r > 50) {\n        this.alive = false;\n      }\n    }\n    if (this.mvR) {\n      if (this.dr <= this.eps) {\n        this.mvR = !this.mvR;\n        this.dtheta = Math.PI/8 + Math.PI*Math.random();\n      } else {\n        let d = Math.min(this.dr, 0.2);\n        this.dr -= d;\n        this.r += d;\n        this.points.push(new THREE.Vector3(\n          this.center.x + this.r*Math.cos(this.theta), \n          this.center.y + this.r*Math.sin(this.theta), \n          0));\n      }\n    } else {\n      if (this.dtheta <= this.eps) {\n        this.mvR = !this.mvR;\n        this.dr = 0.5 + Math.random();\n      } else {\n        let d = Math.min(this.dtheta, Math.PI/100 * this.r);\n        this.dtheta -= d;\n        this.theta += d*this.rev;\n        this.points.push(new THREE.Vector3(\n          this.center.x + this.r*Math.cos(this.theta), \n          this.center.y + this.r*Math.sin(this.theta), \n          0));\n      }\n    }\n  }\n  getLine() : THREE.Line {\n    let geometry : THREE.BufferGeometry = new THREE.BufferGeometry().setFromPoints(this.points);\n    let material : THREE.Material = new THREE.LineBasicMaterial( {color: this.color} );\n    let line : THREE.Line = new THREE.Line(geometry, material);\n    return line\n  }\n}\n\nclass Work {\n  static SCALE_MAX : number = 1.2;\n  static SCALE_MIN : number = 1;\n  texture : THREE.Texture | undefined;\n  textureCircle : THREE.Mesh | undefined;\n  backCircle : THREE.Line;\n  frontCircle : THREE.Object3D;\n  backDiff : THREE.Vector3;\n  position : THREE.Vector3 = new THREE.Vector3(0,0,0);\n  defaultRadius: number;\n  scale_t : number = 0; //from 0, to 1\n  constructor(src : string, position : THREE.Vector3, radius : number, color: number) {\n    //position\n    this.setPosition(position);\n  \n    //set texture circle\n    this.defaultRadius = radius;\n    {\n      new THREE.TextureLoader().load(src, (tex) => {\n        let geo : THREE.CircleGeometry = new THREE.CircleGeometry(radius, 60);\n        let mat : THREE.MeshBasicMaterial = new THREE.MeshBasicMaterial( {map: tex } );\n        this.texture = tex;\n        this.textureCircle = new THREE.Mesh( geo, mat );\n      })\n    }\n\n    //set back circle\n    {\n      let arcGen : THREE.EllipseCurve = new THREE.EllipseCurve(\n        0, 0,\n        radius+30, radius+30,\n        0, Math.PI*2,\n        false,\n        0\n      );\n      let point2D : THREE.Vector2[] = arcGen.getPoints(60);\n      let point3D : THREE.Vector3[] = [];\n      for (let p of point2D) {\n        point3D.push(new THREE.Vector3(p.x, p.y, -5));\n      }\n      let geo : THREE.BufferGeometry = new THREE.BufferGeometry().setFromPoints(point3D);\n      let mat : THREE.Material = new THREE.LineBasicMaterial( {color: color} );\n      this.backCircle = new THREE.Line( geo, mat );\n      this.backCircle.layers.set(LAYER.PLANE);\n      // this.backDiff = new THREE.Vector3(10*(Math.random()*2-1), 10*(Math.random()*2-1), -10);\n      this.backDiff = new THREE.Vector3(0,0,0);\n    }\n\n    //set front circle\n    {\n      let obj : THREE.Object3D = new THREE.Object3D();\n      let arcGen : THREE.EllipseCurve = new THREE.EllipseCurve(\n        0, 0,\n        radius+10, radius+10,\n        0, 2*Math.PI,\n        false,\n        0\n      );\n      let point2D : THREE.Vector2[] = arcGen.getPoints(60);\n      let point3D : THREE.Vector3[] = [];\n      for (let p of point2D) {\n        point3D.push(new THREE.Vector3(p.x, p.y, 0));\n      }\n      let geo : THREE.BufferGeometry = new THREE.BufferGeometry().setFromPoints(point3D);\n      let mat : THREE.Material = new THREE.LineBasicMaterial( {color: color} );\n      let arc : THREE.Line = new THREE.Line( geo, mat );\n      obj.add(arc);\n      let div = 60;\n      for (let i = 0; i < div; i++) {\n        let dr = (i%5==0)?radius/16:radius/32;\n        let points : THREE.Vector3[] = [\n          new THREE.Vector3((radius-dr+10)*Math.cos(i*2*Math.PI/div), (radius-dr+10)*Math.sin(i*2*Math.PI/div), 0),\n          new THREE.Vector3((radius+dr+10)*Math.cos(i*2*Math.PI/div), (radius+dr+10)*Math.sin(i*2*Math.PI/div), 0)\n        ];\n        geo = new THREE.BufferGeometry().setFromPoints(points);\n        let line : THREE.Line = new THREE.Line( geo, mat );\n        obj.add(line);\n      }\n      this.frontCircle = obj;\n      this.frontCircle.layers.set(LAYER.PLANE);\n    }\n  }\n  getTextureCircle() : THREE.Mesh | null {\n    if (this.textureCircle !== undefined) {\n      this.textureCircle.position.x = this.position.x;\n      this.textureCircle.position.y = this.position.y;\n      this.textureCircle.position.z = this.position.z;\n      this.textureCircle.scale.x = this.getTextureScale();\n      this.textureCircle.scale.y = this.getTextureScale();\n      return this.textureCircle;\n    } else {\n      return null;\n    }\n  }\n  getBackCircle() : THREE.Line {\n    this.backCircle.position.x = this.position.x + this.backDiff.x;\n    this.backCircle.position.y = this.position.y + this.backDiff.y;\n    this.backCircle.position.z = this.position.z + this.backDiff.z+10;\n    this.backCircle.scale.x = this.getCircleScale();\n    this.backCircle.scale.y = this.getCircleScale();\n    return this.backCircle;\n  }\n  getFrontCircle() : THREE.Object3D {\n    this.frontCircle.position.x = this.position.x;\n    this.frontCircle.position.y = this.position.y;\n    this.frontCircle.position.z = this.position.z+20;\n    this.frontCircle.scale.x = this.getCircleScale();\n    this.frontCircle.scale.y = this.getCircleScale();\n    return this.frontCircle;\n  }\n  getObject() : THREE.Object3D {\n    let group : THREE.Object3D = new THREE.Object3D();\n    let mesh : THREE.Mesh | null = this.getTextureCircle();\n    if (mesh !== null) {\n      group.add(mesh);\n    }\n    group.add(this.getFrontCircle());\n    group.add(this.getBackCircle());\n    return group;\n  }\n  setPosition(position : THREE.Vector3) {\n    this.position = position;\n  }\n  getTextureScale() : number {\n    return 1 - 0.05 * Math.pow(this.scale_t, 1.5);\n  }\n  getCircleScale() : number {\n    return 1 + 0.1 * Math.pow(this.scale_t, 1.5);\n  }\n  getRadius() : number {\n    return this.defaultRadius * this.getTextureScale();\n  }\n  expand() {\n    if (this.scale_t <= 1) {\n      this.scale_t += Math.min(0.05, 1 - this.scale_t);\n    } else {\n      this.scale_t = 1;\n    }\n  }\n  shrink() {\n    if (this.scale_t >= 0) {\n      this.scale_t -= Math.min(0.05, this.scale_t);\n    } else {\n      this.scale_t = 0;\n    }\n  }\n  update() {\n    this.frontCircle.rotateZ(Math.PI/2000);\n    this.backCircle.rotateZ(-Math.PI/100);\n  }\n}\n\nexport default Content;","/**\n * @author spidersharma / http://eduperiment.com/\n *\n * Inspired from Unreal Engine\n * https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\n */\n\nimport {\n\tAdditiveBlending,\n\tColor,\n\tLinearFilter,\n\tMeshBasicMaterial,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from \"three\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityHighPassShader } from \"../shaders/LuminosityHighPassShader.js\";\n\nvar UnrealBloomPass = function ( resolution, strength, radius, threshold ) {\n\n\tPass.call( this );\n\n\tthis.strength = ( strength !== undefined ) ? strength : 1;\n\tthis.radius = radius;\n\tthis.threshold = threshold;\n\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\t// create color only once here, reuse it later inside the render function\n\tthis.clearColor = new Color( 0, 0, 0 );\n\n\t// render targets\n\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\tthis.renderTargetsHorizontal = [];\n\tthis.renderTargetsVertical = [];\n\tthis.nMips = 5;\n\tvar resx = Math.round( this.resolution.x / 2 );\n\tvar resy = Math.round( this.resolution.y / 2 );\n\n\tthis.renderTargetBright = new WebGLRenderTarget( resx, resy, pars );\n\tthis.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n\tthis.renderTargetBright.texture.generateMipmaps = false;\n\n\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\tvar renderTargetHorizonal = new WebGLRenderTarget( resx, resy, pars );\n\n\t\trenderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n\t\trenderTargetHorizonal.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetsHorizontal.push( renderTargetHorizonal );\n\n\t\tvar renderTargetVertical = new WebGLRenderTarget( resx, resy, pars );\n\n\t\trenderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n\t\trenderTargetVertical.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetsVertical.push( renderTargetVertical );\n\n\t\tresx = Math.round( resx / 2 );\n\n\t\tresy = Math.round( resy / 2 );\n\n\t}\n\n\t// luminosity high pass material\n\n\tif ( LuminosityHighPassShader === undefined )\n\t\tconsole.error( \"UnrealBloomPass relies on LuminosityHighPassShader\" );\n\n\tvar highPassShader = LuminosityHighPassShader;\n\tthis.highPassUniforms = UniformsUtils.clone( highPassShader.uniforms );\n\n\tthis.highPassUniforms[ \"luminosityThreshold\" ].value = threshold;\n\tthis.highPassUniforms[ \"smoothWidth\" ].value = 0.01;\n\n\tthis.materialHighPassFilter = new ShaderMaterial( {\n\t\tuniforms: this.highPassUniforms,\n\t\tvertexShader: highPassShader.vertexShader,\n\t\tfragmentShader: highPassShader.fragmentShader,\n\t\tdefines: {}\n\t} );\n\n\t// Gaussian Blur Materials\n\tthis.separableBlurMaterials = [];\n\tvar kernelSizeArray = [ 3, 5, 7, 9, 11 ];\n\tvar resx = Math.round( this.resolution.x / 2 );\n\tvar resy = Math.round( this.resolution.y / 2 );\n\n\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\tthis.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );\n\n\t\tthis.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new Vector2( resx, resy );\n\n\t\tresx = Math.round( resx / 2 );\n\n\t\tresy = Math.round( resy / 2 );\n\n\t}\n\n\t// Composite material\n\tthis.compositeMaterial = this.getCompositeMaterial( this.nMips );\n\tthis.compositeMaterial.uniforms[ \"blurTexture1\" ].value = this.renderTargetsVertical[ 0 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture2\" ].value = this.renderTargetsVertical[ 1 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture3\" ].value = this.renderTargetsVertical[ 2 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture4\" ].value = this.renderTargetsVertical[ 3 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture5\" ].value = this.renderTargetsVertical[ 4 ].texture;\n\tthis.compositeMaterial.uniforms[ \"bloomStrength\" ].value = strength;\n\tthis.compositeMaterial.uniforms[ \"bloomRadius\" ].value = 0.1;\n\tthis.compositeMaterial.needsUpdate = true;\n\n\tvar bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\n\tthis.compositeMaterial.uniforms[ \"bloomFactors\" ].value = bloomFactors;\n\tthis.bloomTintColors = [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ),\n\t\t\t\t\t\t\t new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ];\n\tthis.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\n\n\t// copy material\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( \"UnrealBloomPass relies on CopyShader\" );\n\n\t}\n\n\tvar copyShader = CopyShader;\n\n\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\tthis.copyUniforms[ \"opacity\" ].value = 1.0;\n\n\tthis.materialCopy = new ShaderMaterial( {\n\t\tuniforms: this.copyUniforms,\n\t\tvertexShader: copyShader.vertexShader,\n\t\tfragmentShader: copyShader.fragmentShader,\n\t\tblending: AdditiveBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\ttransparent: true\n\t} );\n\n\tthis.enabled = true;\n\tthis.needsSwap = false;\n\n\tthis.oldClearColor = new Color();\n\tthis.oldClearAlpha = 1;\n\n\tthis.basic = new MeshBasicMaterial();\n\n\tthis.fsQuad = new Pass.FullScreenQuad( null );\n\n};\n\nUnrealBloomPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: UnrealBloomPass,\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( var i = 0; i < this.renderTargetsVertical.length; i ++ ) {\n\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\n\n\t\t}\n\n\t\tthis.renderTargetBright.dispose();\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tvar resx = Math.round( width / 2 );\n\t\tvar resy = Math.round( height / 2 );\n\n\t\tthis.renderTargetBright.setSize( resx, resy );\n\n\t\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new Vector2( resx, resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t},\n\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tthis.oldClearColor.copy( renderer.getClearColor() );\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor( this.clearColor, 0 );\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render input to screen\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.basic;\n\t\t\tthis.basic.map = readBuffer.texture;\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// 1. Extract Bright Areas\n\n\t\tthis.highPassUniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n\t\tthis.highPassUniforms[ \"luminosityThreshold\" ].value = this.threshold;\n\t\tthis.fsQuad.material = this.materialHighPassFilter;\n\n\t\trenderer.setRenderTarget( this.renderTargetBright );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// 2. Blur All the mips progressively\n\n\t\tvar inputRenderTarget = this.renderTargetBright;\n\n\t\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.fsQuad.material = this.separableBlurMaterials[ i ];\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = inputRenderTarget.texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = UnrealBloomPass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = this.renderTargetsHorizontal[ i ].texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = UnrealBloomPass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\n\n\t\t}\n\n\t\t// Composite All the mips\n\n\t\tthis.fsQuad.material = this.compositeMaterial;\n\t\tthis.compositeMaterial.uniforms[ \"bloomStrength\" ].value = this.strength;\n\t\tthis.compositeMaterial.uniforms[ \"bloomRadius\" ].value = this.radius;\n\t\tthis.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\n\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Blend it additively over the input texture\n\n\t\tthis.fsQuad.material = this.materialCopy;\n\t\tthis.copyUniforms[ \"tDiffuse\" ].value = this.renderTargetsHorizontal[ 0 ].texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Restore renderer settings\n\n\t\trenderer.setClearColor( this.oldClearColor, this.oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t},\n\n\tgetSeperableBlurMaterial: function ( kernelRadius ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t\"KERNEL_RADIUS\": kernelRadius,\n\t\t\t\t\"SIGMA\": kernelRadius\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"colorTexture\": { value: null },\n\t\t\t\t\"texSize\": { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t\"direction\": { value: new Vector2( 0.5, 0.5 ) }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"#include <common>\\\n\t\t\t\tvarying vec2 vUv;\\n\\\n\t\t\t\tuniform sampler2D colorTexture;\\n\\\n\t\t\t\tuniform vec2 texSize;\\\n\t\t\t\tuniform vec2 direction;\\\n\t\t\t\t\\\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\n\t\t\t\t}\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\n\t\t\t\t\tfloat fSigma = float(SIGMA);\\\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\\\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\\\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\\\n\t\t\t\t\t\tfloat x = float(i);\\\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\\\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\\\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\\\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\\\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\\\n\t\t\t\t\t\tweightSum += 2.0 * w;\\\n\t\t\t\t\t}\\\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\\n\\\n\t\t\t\t}\"\n\t\t} );\n\n\t},\n\n\tgetCompositeMaterial: function ( nMips ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t\"NUM_MIPS\": nMips\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"blurTexture1\": { value: null },\n\t\t\t\t\"blurTexture2\": { value: null },\n\t\t\t\t\"blurTexture3\": { value: null },\n\t\t\t\t\"blurTexture4\": { value: null },\n\t\t\t\t\"blurTexture5\": { value: null },\n\t\t\t\t\"dirtTexture\": { value: null },\n\t\t\t\t\"bloomStrength\": { value: 1.0 },\n\t\t\t\t\"bloomFactors\": { value: null },\n\t\t\t\t\"bloomTintColors\": { value: null },\n\t\t\t\t\"bloomRadius\": { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"varying vec2 vUv;\\\n\t\t\t\tuniform sampler2D blurTexture1;\\\n\t\t\t\tuniform sampler2D blurTexture2;\\\n\t\t\t\tuniform sampler2D blurTexture3;\\\n\t\t\t\tuniform sampler2D blurTexture4;\\\n\t\t\t\tuniform sampler2D blurTexture5;\\\n\t\t\t\tuniform sampler2D dirtTexture;\\\n\t\t\t\tuniform float bloomStrength;\\\n\t\t\t\tuniform float bloomRadius;\\\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\\\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\\\n\t\t\t\t\\\n\t\t\t\tfloat lerpBloomFactor(const in float factor) { \\\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\\\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\\\n\t\t\t\t}\\\n\t\t\t\t\\\n\t\t\t\tvoid main() {\\\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\\\n\t\t\t\t}\"\n\t\t} );\n\n\t}\n\n} );\n\nUnrealBloomPass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nUnrealBloomPass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { UnrealBloomPass };\n","import React from 'react';\nimport './App.css';\n// import Text from './Text';\n// import Loading from './Loading';\nimport Content from './Content';\n// import Background from './Background';\n\ninterface AppState {\n  boxes : HTMLElement[]\n  scrollY : number\n}\n\nclass App extends React.Component <{}, AppState> {\n  constructor() {\n    super({});\n    this.state = {\n      boxes: [],\n      scrollY : 0\n    };\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Content />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}