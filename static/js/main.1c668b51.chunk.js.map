{"version":3,"sources":["Profile.tsx","Works.tsx","Links.tsx","WorksDialog.tsx","AnimatedMeshLine.ts","jsm/shaders/CopyShader.js","jsm/postprocessing/Pass.js","jsm/postprocessing/ShaderPass.js","jsm/postprocessing/MaskPass.js","jsm/postprocessing/EffectComposer.js","jsm/postprocessing/RenderPass.js","jsm/shaders/LuminosityHighPassShader.js","jsm/postprocessing/UnrealBloomPass.js","Content.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Profile","react_default","a","createElement","className","React","Component","Works","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","height","style","Links","href","WorksDialog","i","DialogTitle","contents","title","DialogContent","src","img","maxWidth","text","Dialog","open","isDialogOpen","onClose","handleClose","content","renderContent","Button","onClick","color","MeshLine","require","MeshLineMaterial","AnimatedMeshLine","points","speed","lineWidth","amplitude","dashRatio","_this","division","mesh","mat","ran","Math","random","geo","THREE","setFromPoints","getPoints","line","setGeometry","p","sin","transparent","dashArray","dashOffset","geometry","CopyShader","uniforms","tDiffuse","value","opacity","vertexShader","join","fragmentShader","Pass","enabled","needsSwap","clear","renderToScreen","assign","prototype","setSize","render","error","FullScreenQuad","camera","OrthographicCamera","PlaneBufferGeometry","material","_mesh","Mesh","defineProperty","get","set","renderer","ShaderPass","shader","textureID","undefined","ShaderMaterial","UniformsUtils","clone","defines","fsQuad","create","constructor","writeBuffer","readBuffer","texture","setRenderTarget","autoClearColor","autoClearDepth","autoClearStencil","MaskPass","scene","inverse","writeValue","clearValue","context","getContext","state","buffers","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","EQUAL","KEEP","ClearMaskPass","EffectComposer","renderTarget","parameters","minFilter","LinearFilter","magFilter","format","RGBAFormat","stencilBuffer","size","getSize","Vector2","_pixelRatio","getPixelRatio","_width","width","_height","WebGLRenderTarget","name","renderTarget1","renderTarget2","passes","copyPass","clock","Clock","swapBuffers","tmp","addPass","pass","push","insertPass","index","splice","isLastEnabledPass","passIndex","length","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","NOTEQUAL","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","RenderPass","overrideMaterial","clearColor","clearAlpha","clearDepth","oldClearColor","oldClearAlpha","oldAutoClear","autoClear","getClearColor","getHex","getClearAlpha","setClearColor","LuminosityHighPassShader","shaderID","luminosityThreshold","smoothWidth","defaultColor","Color","defaultOpacity","UnrealBloomPass","resolution","strength","radius","threshold","x","y","pars","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","round","resy","renderTargetBright","generateMipmaps","renderTargetHorizonal","renderTargetVertical","highPassShader","highPassUniforms","materialHighPassFilter","separableBlurMaterials","kernelSizeArray","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomTintColors","Vector3","copyShader","copyUniforms","materialCopy","blending","AdditiveBlending","depthTest","depthWrite","basic","MeshBasicMaterial","copy","map","inputRenderTarget","BlurDirectionX","BlurDirectionY","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","direction","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","dirtTexture","bloomStrength","bloomFactors","bloomRadius","container","workN","mouse","palette","circleR","titlePad","window","innerWidth","pad","step","params","exposure","bloomThreshold","LAYER","PLANE","BLOOM","Content","handleDialogClose","setState","prevState","dialogContent","workBoxHeight","componentDidMount","init","componentDidUpdate","box","defaultScrollY","scrollY","boxes","document","getElementById","antialias","devicePixelRatio","innerHeight","toneMapping","appendChild","domElement","background","aspect","dist","tan","fov","PI","position","z","load","tex","wrapS","wrapT","repeat","SpriteMaterial","scale","workGroup","boxM","linewidth","boxLines","_i","_boxes","rect","getBoundingClientRect","boxG","vertices","Float32Array","left","top","right","bottom","addAttribute","layers","works","Array","worksRect","origin","range","d","dx","dy","floor","pos","Work","meshLines","id","_i3","_boxes2","animate","add","work","update","group","getObject","_i5","_meshLines","meshLine","getMesh","renderScene","bloomPass","requestAnimationFrame","addEventListener","e","updateProjectionMatrix","preventDefault","clientX","clientY","sqrt","pow","getRadius","expand","shrink","_loop","src_Profile_0","src_Links","src_Works","src_WorksDialog","_this2","textureCircle","backCircle","frontCircle","defaultRadius","scale_t","setPosition","point2D","point3D","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","mesh2","rotateZ","obj","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","arc","dr","cos","getTextureScale","getCircleScale","getTextureCircle","getFrontCircle","getBackCircle","min","SCALE_MAX","SCALE_MIN","App","src_Content_0","Boolean","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c668b51.chunk.js","sourcesContent":["import React from 'react';\nimport './Profile.css'\n\nclass Profile extends React.Component {\n  render() {\n    return (\n      <div className=\"text\">\n        <div className=\"title\">Profile</div>\n        <div className=\"detail\">\n          <div><b>Nocks_on</b>と申します。<b>のくそん</b>と読みます。</div>\n          <br />\n          <div>好きなこと:\n            <div>ゲーム、VRが好きです。今までの人生で一番好きなゲームは『カービィのエアライド』です。最近OculusQuestを買ってVRを楽しんでします。</div>\n          </div>\n          <br />\n          <div>やったこと: \n            <li>Webアプリ開発</li>\n            <li>短いゲーム開発</li>\n            <li>シェーダなどのビジュアルプログラミング</li>\n            <li>動画編集など</li>\n          </div>\n          <br />\n          <div>言語について:\n            <li>よく使う: C++、JavaScript</li>\n            <li>そこそこ使っている: GLSL</li>\n            <li>使える: Java, Python, Swift, Ruby, PHP, HTML/CSS</li>\n            <li>興味がある: Haskell</li>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Profile;","import React from 'react';\nimport './Profile.css'\n\ninterface WorksProps {\n  height : number\n}\n\nclass Works extends React.Component<WorksProps, {}> {\n  constructor(props : WorksProps) {\n    super(props);\n  }\n  componentDidUpdate() {\n    console.log('works updated!');\n    console.log(this.props.height);\n  }\n  render() {\n    return (\n      <div className=\"text\">\n        <div className=\"title\">Works / Activities</div>\n        <div className=\"detail\" style={{height: this.props.height}}>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Works;","import React from 'react';\nimport './Profile.css'\n\nclass Links extends React.Component {\n  render() {\n    return (\n      <div className=\"text\">\n        <div className=\"title\">Links</div>\n        <div className=\"detail\">\n          <li>Github: <a href=\"https://github.com/VacuumedOne\">VacuumedOne</a></li>\n          <li>Twitter: <a href=\"https://twitter.com/nocks_on\">のくそん</a></li>\n          <li>Shadertoy: <a href=\"https://www.shadertoy.com/profile?show=shaders\">Nocks_on</a></li>\n          <li>OpenProcessing: <a href=\"https://www.openprocessing.org/user/181939\">Nocks_on</a></li>\n          <li>はてなブログ: </li>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Links;","import React from 'react';\n\nimport { Dialog, DialogTitle, DialogContent, Button } from '@material-ui/core';\n\ninterface WDProps {\n  isDialogOpen : boolean,\n  content : number,\n  handleClose() : void\n}\n\nclass WorksDialog extends React.Component<WDProps> {\n  constructor(props : WDProps) {\n    super(props);\n  }\n  renderContent(i : number) {\n    return (\n      <div>\n        <DialogTitle>{contents[i].title}</DialogTitle>\n        <DialogContent>\n          <img src={contents[i].img} style={{maxWidth: 500}}></img>\n          <div>{contents[i].text}</div>\n        </DialogContent>\n      </div>\n    )\n  }\n  render() {\n    return (\n      <Dialog open={this.props.isDialogOpen} onClose={this.props.handleClose}>\n        {(this.props.content !== -1) ? this.renderContent(this.props.content) : null}\n        <Button onClick={this.props.handleClose} color=\"primary\">Close</Button>\n      </Dialog>\n    )\n  }\n}\n\ninterface ContentText {\n  title : string,\n  img : string,\n  text : JSX.Element\n}\n\nconst contents : ContentText[] = [\n  {\n    title : 'RGB',\n    img : 'images/work0.png',\n    text : (<div>JavaScript始めたての頃に3時間jamで制作した単発ゲームです。素のHTMLCanvasで作られています。<a href=\"https://vacuumedone.github.io/RGB/\">こちらより</a></div>)\n  },\n  {\n    title : 'つばくログ',\n    img : 'images/work1.png',\n    text : (<div>所属していたボート部向けに制作した「記録とフィードバックを促すアプリ」です。制作には大学3年の秋から大学4年の春までかかり、長い期間の個人開発となりました。Vue.js+Node.js製です。TypeScriptを使っていなかったので辛かった...。外部に公開していません。</div>)\n  },\n  {\n    title : 'GroP',\n    img : 'images/work2.png',\n    text : (<div>Webアプリ開発の授業の中で5人チームで作ったアプリです。自分にとっては初めてのチーム開発でした。タスクを「木を育てる」ことに重ね合わせて視覚的に楽しそうにしたTODOアプリです。</div>)\n  },\n  {\n    title : 'Transmissions',\n    img : 'images/work3.png',\n    text : (<div>Shaderが魔法みたいだなぁと憧れて作ったものです。GLSLで書いてshadertoyに投稿しました。レイマーチングを使えば無限の奥行きをいい感じに見せることができて楽しいですね。距離関数やフォールディングなどの技巧が必要で、まだまだ勉強の必要を感じます。<a href=\"https://www.shadertoy.com/view/3l2SRh\">こちらから</a></div>)\n  },\n  {\n    title: 'Logo Animation',\n    img: 'images/work4.gif',\n    text: (<div>anime.jsを使えばCSSアニメーションを簡単にリッチにすることができる。これでボタンとか作ってみたい。ライブラリとしても軽い部類だと思うので、いい感じ。複雑なバスを打つのもいいですが、弧と直線の組み合わせでそれなりに見やすいデザインができて良い。<a href=\"https://vacuumedone.github.io/logo-animation/\">こちらから</a></div>)\n  }\n] \n\nexport default WorksDialog;","import * as THREE from 'three';\n\nlet MeshLine = require('three.meshline').MeshLine;\nlet MeshLineMaterial = require('three.meshline').MeshLineMaterial;\n\nclass AnimatedMeshLine {\n  division: number = 100;\n  points : THREE.Vector3[];\n  color : THREE.Color | number;\n  mesh : THREE.Mesh;\n  mat : any;\n  speed : number = 0.01;\n  lineWidth : number = 3;\n  amplitude : number = 0;\n  dashRatio : number = 0;\n  ran : number = Math.random();\n  constructor(points : THREE.Vector3[], color : THREE.Color | number, speed? : number, lineWidth? : number, amplitude? : number, dashRatio?: number) {\n    this.points = points;\n    this.color = color;\n    if (lineWidth) this.lineWidth = lineWidth;\n    if (amplitude) this.amplitude = amplitude;\n    if (dashRatio) this.dashRatio = dashRatio;\n    {\n      let geo : THREE.Geometry = new THREE.Geometry();\n      geo.setFromPoints(new THREE.CatmullRomCurve3(points).getPoints(this.division));\n      let line = new MeshLine();\n      line.setGeometry(geo, (p : number) => {\n        // return this.lineWidth + this.amplitude*Math.sin(this.division*p + this.ran*10);\n        return this.lineWidth + this.amplitude*Math.sin(p);\n        // return 5;\n      });\n      let mat = new MeshLineMaterial({\n        transparent : true,\n        color: this.color,\n        dashArray: 1,\n        dashOffset: 0,\n        dashRatio: this.dashRatio\n      });\n      this.mat = mat;\n      this.mesh = new THREE.Mesh(line.geometry, mat);\n    }\n  }\n  getMesh () {\n    return this.mesh;\n  }\n  update() {\n    this.mat.dashOffset += this.speed;\n  }\n  isAlive() {\n\n  }\n  respawn() {\n\n  }\n}\n\nexport default AnimatedMeshLine;","/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Full-screen textured quad shader\n */\n\n\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"opacity\":  { value: 1.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vUv = uv;\",\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform float opacity;\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vec4 texel = texture2D( tDiffuse, vUv );\",\n\t\t\t\"gl_FragColor = opacity * texel;\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { CopyShader };\n","import {\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tMesh\n} from \"three\";\n\nfunction Pass() {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n}\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { Pass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tShaderMaterial,\n\tUniformsUtils\n} from \"three\";\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar ShaderPass = function ( shader, textureID ) {\n\n\tPass.call( this );\n\n\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\n\n\tif ( shader instanceof ShaderMaterial ) {\n\n\t\tthis.uniforms = shader.uniforms;\n\n\t\tthis.material = shader;\n\n\t} else if ( shader ) {\n\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t}\n\n\tthis.fsQuad = new Pass.FullScreenQuad( this.material );\n\n};\n\nShaderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: ShaderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n} );\n\nexport { ShaderPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar MaskPass = function ( scene, camera ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.clear = true;\n\tthis.needsSwap = false;\n\n\tthis.inverse = false;\n\n};\n\nMaskPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: MaskPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar context = renderer.getContext();\n\t\tvar state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tvar writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n} );\n\n\nvar ClearMaskPass = function () {\n\n\tPass.call( this );\n\n\tthis.needsSwap = false;\n\n};\n\nClearMaskPass.prototype = Object.create( Pass.prototype );\n\nObject.assign( ClearMaskPass.prototype, {\n\n\trender: function ( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n} );\n\nexport { MaskPass, ClearMaskPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tClock,\n\tLinearFilter,\n\tMesh,\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tRGBAFormat,\n\tVector2,\n\tWebGLRenderTarget\n} from \"three\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"../postprocessing/ShaderPass.js\";\nimport { MaskPass } from \"../postprocessing/MaskPass.js\";\nimport { ClearMaskPass } from \"../postprocessing/MaskPass.js\";\n\nvar EffectComposer = function ( renderer, renderTarget ) {\n\n\tthis.renderer = renderer;\n\n\tif ( renderTarget === undefined ) {\n\n\t\tvar parameters = {\n\t\t\tminFilter: LinearFilter,\n\t\t\tmagFilter: LinearFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\tstencilBuffer: false\n\t\t};\n\n\t\tvar size = renderer.getSize( new Vector2() );\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\tthis._width = size.width;\n\t\tthis._height = size.height;\n\n\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t} else {\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = renderTarget.width;\n\t\tthis._height = renderTarget.height;\n\n\t}\n\n\tthis.renderTarget1 = renderTarget;\n\tthis.renderTarget2 = renderTarget.clone();\n\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\tthis.writeBuffer = this.renderTarget1;\n\tthis.readBuffer = this.renderTarget2;\n\n\tthis.renderToScreen = true;\n\n\tthis.passes = [];\n\n\t// dependencies\n\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t}\n\n\tif ( ShaderPass === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t}\n\n\tthis.copyPass = new ShaderPass( CopyShader );\n\n\tthis.clock = new Clock();\n\n};\n\nObject.assign( EffectComposer.prototype, {\n\n\tswapBuffers: function () {\n\n\t\tvar tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t},\n\n\taddPass: function ( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t},\n\n\tinsertPass: function ( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\n\t},\n\n\tisLastEnabledPass: function ( passIndex ) {\n\n\t\tfor ( var i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\trender: function ( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tvar maskActive = false;\n\n\t\tvar pass, i, il = this.passes.length;\n\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tpass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tvar context = this.renderer.getContext();\n\t\t\t\t\tvar stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t},\n\n\treset: function ( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tvar effectiveWidth = this._width * this._pixelRatio;\n\t\tvar effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t},\n\n\tsetPixelRatio: function ( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n} );\n\n\nvar Pass = function () {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n};\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { EffectComposer, Pass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.overrideMaterial = overrideMaterial;\n\n\tthis.clearColor = clearColor;\n\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\tthis.clear = true;\n\tthis.clearDepth = false;\n\tthis.needsSwap = false;\n\n};\n\nRenderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: RenderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\tvar oldClearColor, oldClearAlpha;\n\n\t\tif ( this.clearColor ) {\n\n\t\t\toldClearColor = renderer.getClearColor().getHex();\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = null;\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n} );\n\nexport { RenderPass };\n","/**\n * @author bhouston / http://clara.io/\n *\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nimport {\n\tColor\n} from \"three\";\n\nvar LuminosityHighPassShader = {\n\n\tshaderID: \"luminosityHighPass\",\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"luminosityThreshold\": { value: 1.0 },\n\t\t\"smoothWidth\": { value: 1.0 },\n\t\t\"defaultColor\": { value: new Color( 0x000000 ) },\n\t\t\"defaultOpacity\": { value: 0.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vUv = uv;\",\n\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join(\"\\n\"),\n\n\tfragmentShader: [\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform vec3 defaultColor;\",\n\t\t\"uniform float defaultOpacity;\",\n\t\t\"uniform float luminosityThreshold;\",\n\t\t\"uniform float smoothWidth;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vec4 texel = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\"vec3 luma = vec3( 0.299, 0.587, 0.114 );\",\n\n\t\t\t\"float v = dot( texel.xyz, luma );\",\n\n\t\t\t\"vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\",\n\n\t\t\t\"float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\",\n\n\t\t\t\"gl_FragColor = mix( outputColor, texel, alpha );\",\n\n\t\t\"}\"\n\n\t].join(\"\\n\")\n\n};\n\nexport { LuminosityHighPassShader };\n","/**\n * @author spidersharma / http://eduperiment.com/\n *\n * Inspired from Unreal Engine\n * https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\n */\n\nimport {\n\tAdditiveBlending,\n\tColor,\n\tLinearFilter,\n\tMeshBasicMaterial,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from \"three\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityHighPassShader } from \"../shaders/LuminosityHighPassShader.js\";\n\nvar UnrealBloomPass = function ( resolution, strength, radius, threshold ) {\n\n\tPass.call( this );\n\n\tthis.strength = ( strength !== undefined ) ? strength : 1;\n\tthis.radius = radius;\n\tthis.threshold = threshold;\n\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\t// create color only once here, reuse it later inside the render function\n\tthis.clearColor = new Color( 0, 0, 0 );\n\n\t// render targets\n\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\tthis.renderTargetsHorizontal = [];\n\tthis.renderTargetsVertical = [];\n\tthis.nMips = 5;\n\tvar resx = Math.round( this.resolution.x / 2 );\n\tvar resy = Math.round( this.resolution.y / 2 );\n\n\tthis.renderTargetBright = new WebGLRenderTarget( resx, resy, pars );\n\tthis.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n\tthis.renderTargetBright.texture.generateMipmaps = false;\n\n\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\tvar renderTargetHorizonal = new WebGLRenderTarget( resx, resy, pars );\n\n\t\trenderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n\t\trenderTargetHorizonal.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetsHorizontal.push( renderTargetHorizonal );\n\n\t\tvar renderTargetVertical = new WebGLRenderTarget( resx, resy, pars );\n\n\t\trenderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n\t\trenderTargetVertical.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetsVertical.push( renderTargetVertical );\n\n\t\tresx = Math.round( resx / 2 );\n\n\t\tresy = Math.round( resy / 2 );\n\n\t}\n\n\t// luminosity high pass material\n\n\tif ( LuminosityHighPassShader === undefined )\n\t\tconsole.error( \"UnrealBloomPass relies on LuminosityHighPassShader\" );\n\n\tvar highPassShader = LuminosityHighPassShader;\n\tthis.highPassUniforms = UniformsUtils.clone( highPassShader.uniforms );\n\n\tthis.highPassUniforms[ \"luminosityThreshold\" ].value = threshold;\n\tthis.highPassUniforms[ \"smoothWidth\" ].value = 0.01;\n\n\tthis.materialHighPassFilter = new ShaderMaterial( {\n\t\tuniforms: this.highPassUniforms,\n\t\tvertexShader: highPassShader.vertexShader,\n\t\tfragmentShader: highPassShader.fragmentShader,\n\t\tdefines: {}\n\t} );\n\n\t// Gaussian Blur Materials\n\tthis.separableBlurMaterials = [];\n\tvar kernelSizeArray = [ 3, 5, 7, 9, 11 ];\n\tvar resx = Math.round( this.resolution.x / 2 );\n\tvar resy = Math.round( this.resolution.y / 2 );\n\n\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\tthis.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );\n\n\t\tthis.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new Vector2( resx, resy );\n\n\t\tresx = Math.round( resx / 2 );\n\n\t\tresy = Math.round( resy / 2 );\n\n\t}\n\n\t// Composite material\n\tthis.compositeMaterial = this.getCompositeMaterial( this.nMips );\n\tthis.compositeMaterial.uniforms[ \"blurTexture1\" ].value = this.renderTargetsVertical[ 0 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture2\" ].value = this.renderTargetsVertical[ 1 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture3\" ].value = this.renderTargetsVertical[ 2 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture4\" ].value = this.renderTargetsVertical[ 3 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture5\" ].value = this.renderTargetsVertical[ 4 ].texture;\n\tthis.compositeMaterial.uniforms[ \"bloomStrength\" ].value = strength;\n\tthis.compositeMaterial.uniforms[ \"bloomRadius\" ].value = 0.1;\n\tthis.compositeMaterial.needsUpdate = true;\n\n\tvar bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\n\tthis.compositeMaterial.uniforms[ \"bloomFactors\" ].value = bloomFactors;\n\tthis.bloomTintColors = [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ),\n\t\t\t\t\t\t\t new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ];\n\tthis.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\n\n\t// copy material\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( \"UnrealBloomPass relies on CopyShader\" );\n\n\t}\n\n\tvar copyShader = CopyShader;\n\n\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\tthis.copyUniforms[ \"opacity\" ].value = 1.0;\n\n\tthis.materialCopy = new ShaderMaterial( {\n\t\tuniforms: this.copyUniforms,\n\t\tvertexShader: copyShader.vertexShader,\n\t\tfragmentShader: copyShader.fragmentShader,\n\t\tblending: AdditiveBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\ttransparent: true\n\t} );\n\n\tthis.enabled = true;\n\tthis.needsSwap = false;\n\n\tthis.oldClearColor = new Color();\n\tthis.oldClearAlpha = 1;\n\n\tthis.basic = new MeshBasicMaterial();\n\n\tthis.fsQuad = new Pass.FullScreenQuad( null );\n\n};\n\nUnrealBloomPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: UnrealBloomPass,\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( var i = 0; i < this.renderTargetsVertical.length; i ++ ) {\n\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\n\n\t\t}\n\n\t\tthis.renderTargetBright.dispose();\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tvar resx = Math.round( width / 2 );\n\t\tvar resy = Math.round( height / 2 );\n\n\t\tthis.renderTargetBright.setSize( resx, resy );\n\n\t\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new Vector2( resx, resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t},\n\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tthis.oldClearColor.copy( renderer.getClearColor() );\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor( this.clearColor, 0 );\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render input to screen\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.basic;\n\t\t\tthis.basic.map = readBuffer.texture;\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// 1. Extract Bright Areas\n\n\t\tthis.highPassUniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n\t\tthis.highPassUniforms[ \"luminosityThreshold\" ].value = this.threshold;\n\t\tthis.fsQuad.material = this.materialHighPassFilter;\n\n\t\trenderer.setRenderTarget( this.renderTargetBright );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// 2. Blur All the mips progressively\n\n\t\tvar inputRenderTarget = this.renderTargetBright;\n\n\t\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.fsQuad.material = this.separableBlurMaterials[ i ];\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = inputRenderTarget.texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = UnrealBloomPass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = this.renderTargetsHorizontal[ i ].texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = UnrealBloomPass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\n\n\t\t}\n\n\t\t// Composite All the mips\n\n\t\tthis.fsQuad.material = this.compositeMaterial;\n\t\tthis.compositeMaterial.uniforms[ \"bloomStrength\" ].value = this.strength;\n\t\tthis.compositeMaterial.uniforms[ \"bloomRadius\" ].value = this.radius;\n\t\tthis.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\n\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Blend it additively over the input texture\n\n\t\tthis.fsQuad.material = this.materialCopy;\n\t\tthis.copyUniforms[ \"tDiffuse\" ].value = this.renderTargetsHorizontal[ 0 ].texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Restore renderer settings\n\n\t\trenderer.setClearColor( this.oldClearColor, this.oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t},\n\n\tgetSeperableBlurMaterial: function ( kernelRadius ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t\"KERNEL_RADIUS\": kernelRadius,\n\t\t\t\t\"SIGMA\": kernelRadius\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"colorTexture\": { value: null },\n\t\t\t\t\"texSize\": { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t\"direction\": { value: new Vector2( 0.5, 0.5 ) }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"#include <common>\\\n\t\t\t\tvarying vec2 vUv;\\n\\\n\t\t\t\tuniform sampler2D colorTexture;\\n\\\n\t\t\t\tuniform vec2 texSize;\\\n\t\t\t\tuniform vec2 direction;\\\n\t\t\t\t\\\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\n\t\t\t\t}\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\n\t\t\t\t\tfloat fSigma = float(SIGMA);\\\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\\\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\\\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\\\n\t\t\t\t\t\tfloat x = float(i);\\\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\\\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\\\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\\\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\\\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\\\n\t\t\t\t\t\tweightSum += 2.0 * w;\\\n\t\t\t\t\t}\\\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\\n\\\n\t\t\t\t}\"\n\t\t} );\n\n\t},\n\n\tgetCompositeMaterial: function ( nMips ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t\"NUM_MIPS\": nMips\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"blurTexture1\": { value: null },\n\t\t\t\t\"blurTexture2\": { value: null },\n\t\t\t\t\"blurTexture3\": { value: null },\n\t\t\t\t\"blurTexture4\": { value: null },\n\t\t\t\t\"blurTexture5\": { value: null },\n\t\t\t\t\"dirtTexture\": { value: null },\n\t\t\t\t\"bloomStrength\": { value: 1.0 },\n\t\t\t\t\"bloomFactors\": { value: null },\n\t\t\t\t\"bloomTintColors\": { value: null },\n\t\t\t\t\"bloomRadius\": { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"varying vec2 vUv;\\\n\t\t\t\tuniform sampler2D blurTexture1;\\\n\t\t\t\tuniform sampler2D blurTexture2;\\\n\t\t\t\tuniform sampler2D blurTexture3;\\\n\t\t\t\tuniform sampler2D blurTexture4;\\\n\t\t\t\tuniform sampler2D blurTexture5;\\\n\t\t\t\tuniform sampler2D dirtTexture;\\\n\t\t\t\tuniform float bloomStrength;\\\n\t\t\t\tuniform float bloomRadius;\\\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\\\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\\\n\t\t\t\t\\\n\t\t\t\tfloat lerpBloomFactor(const in float factor) { \\\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\\\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\\\n\t\t\t\t}\\\n\t\t\t\t\\\n\t\t\t\tvoid main() {\\\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\\\n\t\t\t\t}\"\n\t\t} );\n\n\t}\n\n} );\n\nUnrealBloomPass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nUnrealBloomPass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { UnrealBloomPass };\n","import React from 'react';\nimport Profile from './Profile';\nimport Works from './Works';\nimport Links from './Links';\nimport WorksDialog from './WorksDialog'\nimport './Content.css';\nimport AnimatedMeshLine from './AnimatedMeshLine';\n\nimport * as THREE from 'three';\n\nimport { EffectComposer } from './jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from './jsm/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from './jsm/postprocessing/UnrealBloomPass.js';\n\nimport { SpriteMaterial, Mesh } from 'three';\n\nlet MeshLine : any = require('three.meshline').MeshLine;\nlet MeshLineMaterial : any = require('three.meshline').MeshLineMaterial;\n\ninterface ContentState {\n  isDialogOpen : boolean,\n  dialogContent : number,\n  workBoxHeight : number\n}\n\ninterface BloomParam {\n  exposure: number,\n  bloomStrength: number,\n  bloomThreshold: number,\n  bloomRadius: number\n}\n\n\n///////////////////////////////\n// for updating parameter\nlet workN : number = 5;\n///////////////////////////////\n\nlet container : HTMLElement | null;\nlet scene : THREE.Scene;\n// let pointLight : THREE.PointLight;\nlet renderer : THREE.WebGLRenderer;\nlet camera : THREE.PerspectiveCamera;\nlet composer : EffectComposer;\nlet mouse : THREE.Vector3 = new THREE.Vector3(0,0,0);\n\n//color\nlet palette : number[][] = [\n  [\n    0x45bf55,\n    0xb5e5bb,\n    0x00b496\n  ],\n  [\n    0x731229,\n    0x45bf55,\n    0x181273,\n  ]\n];\n\n\n//wonderLine\nlet wNum : number = 5;\nlet wonderStart : boolean = false;\n\n//works\nlet circleR : number = 100;\nlet titlePad : number = (window.innerWidth <= 600) ? 150 : 75; //[Works/Activities]の文字分のパディング\nlet pad : number = circleR + 50;\nlet step : number = 300;\n\n\nlet params : BloomParam = {\n  exposure: 1,\n  bloomStrength: 2,\n  bloomThreshold: 0,\n  bloomRadius: 0\n};\n\nlet LAYER = {\n  PLANE: 0,\n  BLOOM: 1\n};\n\nclass Content extends React.Component<{}, ContentState> {\n  constructor() {\n    super({});\n    this.state = {\n      isDialogOpen : false,\n      dialogContent : -1,\n      workBoxHeight : 500\n    }\n    // this.handleDialogClose = this.handleDialogClose.bind(this);\n  }\n  render() {\n    return (\n      <div id=\"content\">\n        <div className=\"layer1\">\n          <div id=\"background\"></div>\n        </div>\n        <div className=\"layer2\">\n          <div className=\"header\">Portfolio / Nocks_on</div>\n          <div className=\"body\">\n            <div className=\"item\" id=\"box1\">\n              <Profile />\n            </div>\n            <div className=\"item\" id=\"box3\">\n              <Links />\n            </div>\n            <div className=\"item\" id=\"box2\">\n              <Works height={this.state.workBoxHeight}/>\n            </div>\n          </div>\n          <WorksDialog isDialogOpen={this.state.isDialogOpen} content={this.state.dialogContent} handleClose={this.handleDialogClose}/>\n        </div>\n      </div>\n    )\n  }\n  handleDialogClose = () => {\n    this.setState((prevState) => {\n      return {\n        isDialogOpen : false,\n        dialogContent : -1,\n        workBoxHeight : prevState.workBoxHeight\n      };\n    });\n  }\n  componentDidMount = () => {\n    this.init();\n  }\n  componentDidUpdate = () => {\n    // this.init();\n  }\n  init = () => {\n    let defaultScrollY = window.scrollY;\n    let boxes : HTMLElement[] = [];\n    let box : HTMLElement | null;\n    for (let i = 1; i <= 3; i++) {\n      box = document.getElementById('box' + i);\n      if (box !== null) {\n        boxes.push(box);\n      }\n    }\n    if (boxes.length !== 3) {\n      return;\n    }\n\n    container = document.getElementById('background');\n    if (container == null) {\n      return;\n    }\n\n    //Renderer\n    renderer = new THREE.WebGLRenderer( {antialias: true} );\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.toneMapping = THREE.ReinhardToneMapping;\n    renderer.autoClear = false;\n    container.appendChild( renderer.domElement );\n\n    //Camera\n    let fov : number = 60;\n    let aspect : number = window.innerWidth / window.innerHeight;\n    let dist : number = (window.innerHeight/2) / Math.tan((fov/2)*Math.PI/180);\n    camera = new THREE.PerspectiveCamera(fov, aspect, 1, 1000);\n    camera.position.z = dist;\n\n    //Background Plane\n    let background : THREE.Sprite | null;\n    {\n      new THREE.TextureLoader().load('texture/background.png', (tex) => {\n        tex.wrapS = THREE.RepeatWrapping;\n        tex.wrapT = THREE.RepeatWrapping;\n        tex.repeat.set(10, 10);\n        let mat = new SpriteMaterial({\n          map: tex\n        });\n        background = new THREE.Sprite(mat);\n        background.scale.x = 10000;\n        background.scale.y = 10000;\n        background.position.z = -100;\n      });\n    }\n\n    //Boxes\n    let boxM : THREE.LineBasicMaterial = new THREE.LineBasicMaterial( {color: palette[0][0], linewidth: 10}, );\n    let boxLines : THREE.Line[] = [];\n    {\n      for (let box of boxes) {\n        let rect : ClientRect | DOMRect = box.getBoundingClientRect();\n        let boxG : THREE.BufferGeometry = new THREE.BufferGeometry();\n        let vertices : Float32Array = new Float32Array([\n          rect.left, -rect.top, 0,\n          rect.right, -rect.top, 0,\n          rect.right, -rect.bottom, 0,\n          rect.left, -rect.bottom, 0,\n          rect.left, -rect.top, 0,\n        ]);\n        boxG.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\n        let line : THREE.Line = new THREE.Line(boxG, boxM);\n        line.position.x = -window.innerWidth/2;\n        line.position.y = window.innerHeight/2 - defaultScrollY;\n        line.layers.set(LAYER.PLANE);\n        boxLines.push(line);\n      }\n    }\n\n    //Works\n    let workGroup : THREE.Object3D;\n    let works : (Work | undefined)[] = new Array(workN);\n    let worksRect : ClientRect | DOMRect = boxes[1].getBoundingClientRect();\n    let origin : THREE.Vector3 = new THREE.Vector3(\n      -window.innerWidth/2 + worksRect.left + pad,\n      window.innerHeight/2 - worksRect.top - defaultScrollY - pad - titlePad,\n      0);\n    let range : number = worksRect.width - 2 * pad;\n    \n    for(let i = 0; i < workN; i++) {\n      let d : number = i * step;\n      let dx : number = (d % range);\n      let dy : number = i * 2 * circleR + Math.floor(d / range) * circleR;\n      let pos : THREE.Vector3 = new THREE.Vector3(origin.x + dx, origin.y - dy, 0);\n      works[i] = new Work('texture/work' + i + '.png', pos, circleR, palette[0][Math.floor(Math.random()*palette.length)]);\n    }\n    this.setState((prevState) => {\n      return {\n        isDialogOpen : prevState.isDialogOpen,\n        workBoxHeight : (workN-1) * 2 * circleR + Math.floor((workN-1) * step / range) * circleR + circleR + pad\n      };\n    });\n\n    //MeshLine\n    let meshLines : AnimatedMeshLine[] = [];\n    let id = 0;\n    for (let box of boxes) {\n      let rect : DOMRect | ClientRect = box.getBoundingClientRect();\n      console.log(rect.top);\n      let points : THREE.Vector3[] = [];\n      let x = -1000;\n      let y = -rect.top - 70 + window.innerHeight/2 - window.scrollY;\n      while(x < rect.left - window.innerWidth/2) {\n        points.push(new THREE.Vector3(x, y, 0));\n        x += 200;\n      }\n      while(x < 1000) {\n        points.push(new THREE.Vector3(x, y, 0));\n        x += 200;\n      }\n      \n      meshLines.push(new AnimatedMeshLine(points, palette[1][id++], 0.01, 5, 3, 0.8));\n    }\n    // let points : THREE.Vector3[] = [];\n    // points.push(new THREE.Vector3(-1000, 0, 0));\n    // points.push(new THREE.Vector3(0, 0, 0));\n    // points.push(new THREE.Vector3(100, 100, 0));\n    // points.push(new THREE.Vector3(0, 200, 0));\n    // points.push(new THREE.Vector3(-100, 100, 0));\n    // points.push(new THREE.Vector3(0, 0, 0));\n    // points.push(new THREE.Vector3(1000, 0, 0));\n    // let meshLine = new AnimatedMeshLine(points, new THREE.Color(0xff0000));\n\n    const animate = () => {\n      scene = new THREE.Scene();\n      camera.position.y = -window.scrollY;\n      // camera.position.x = mouse.x/20;\n      // camera.position.y = mouse.y/20 - window.scrollY;\n      // camera.lookAt(0, -window.scrollY, 0);\n\n      // scene.add(camera);\n      \n      // scene.add( new THREE.AmbientLight(0x404040) );\n\n      // pointLight = new THREE.PointLight(0xffffff, 1);\n      // camera.add(pointLight);\n\n      if (background !== null) {\n        scene.add(background);\n      }\n\n      // for (let boxLine of boxLines) {\n      //   scene.add(boxLine);\n      // }\n\n      workGroup = new THREE.Object3D();\n      for (let i = 0; i < workN; i++) {\n        let work : Work | undefined = works[i];\n        if (work !== undefined) {\n          work.update();\n          let group : THREE.Object3D = work.getObject();\n          workGroup.add(group);\n        }\n      }\n      scene.add(workGroup);\n\n      // scene.add(spriteGroup);\n\n      for (let meshLine of meshLines) {\n        meshLine.update();\n        scene.add(meshLine.getMesh());\n      }\n\n\n      //Post Process\n      var renderScene = new RenderPass( scene, camera );\n      var bloomPass = new UnrealBloomPass( new THREE.Vector2( window.innerWidth, window.innerHeight ), 1.5, 0.4, 0.85 );\n      bloomPass.threshold = params.bloomThreshold;\n      bloomPass.strength = params.bloomStrength;\n      bloomPass.radius = params.bloomRadius;\n\n      composer = new EffectComposer( renderer );\n      composer.addPass( renderScene );\n      // composer.addPass( bloomPass );\n\n      requestAnimationFrame(animate);\n\n      camera.layers.set(LAYER.PLANE);\n      renderer.render(scene, camera);\n      // renderer.clearDepth();\n      // camera.layers.set(LAYER.BLOOM);\n      // composer.render();\n    }\n    animate();\n\n    const onWindowResize = (e : UIEvent) => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n    window.addEventListener('resize', onWindowResize, false);\n\n    const onMouseMove = (e : MouseEvent) => {\n      e.preventDefault();\n      mouse.x = e.clientX - window.innerWidth/2;\n      mouse.y = -e.clientY + window.innerHeight/2;\n\n      for (let i = 0; i < workN; i++) {\n        let work : Work | undefined = works[i];\n        if (work !== undefined) {\n          let dist = Math.sqrt(\n            Math.pow(work.position.x - mouse.x, 2.0) +\n            Math.pow(work.position.y - mouse.y + window.scrollY, 2.0)\n          ) - work.getRadius();\n          if (dist < 0) {\n            work.expand();\n          } else {\n            work.shrink();\n          }\n        }\n      }\n    }\n    window.addEventListener('mousemove', onMouseMove, false);\n\n    const onClick = (e : MouseEvent) => {\n      if (!this.state.isDialogOpen) {\n        mouse.x = e.clientX - window.innerWidth/2;\n        mouse.y = -e.clientY + window.innerHeight/2;\n  \n        for (let i = 0; i < workN; i++) {\n          let work : Work | undefined = works[i];\n          if (work !== undefined) {\n            let dist = Math.sqrt(\n              Math.pow(work.position.x - mouse.x, 2.0) +\n              Math.pow(work.position.y - mouse.y + window.scrollY, 2.0)\n            ) - work.getRadius();\n            if (dist < 0) {\n              this.setState((prevState) => {\n                return {\n                  isDialogOpen : true,\n                  dialogContent : i,\n                  workBoxHeight : prevState.workBoxHeight\n                }\n              })\n            }\n          }\n        }\n      }\n    }\n    window.addEventListener('click', onClick, false);\n  }\n}\n\nclass BoldLine {\n\n}\n\nclass Work {\n  static SCALE_MAX : number = 1.2;\n  static SCALE_MIN : number = 1;\n  texture : THREE.Texture | undefined;\n  textureCircle : THREE.Mesh | undefined;\n  backCircle : THREE.Object3D;\n  frontCircle : THREE.Object3D;\n  position : THREE.Vector3 = new THREE.Vector3(0,0,0);\n  defaultRadius: number;\n  scale_t : number = 0; //from 0, to 1\n  constructor(src : string, position : THREE.Vector3, radius : number, color: number) {\n    //position\n    this.setPosition(position);\n  \n    //set texture circle\n    this.defaultRadius = radius;\n    {\n      new THREE.TextureLoader().load(src, (tex) => {\n        let geo : THREE.CircleGeometry = new THREE.CircleGeometry(radius, 60);\n        let mat : THREE.MeshBasicMaterial = new THREE.MeshBasicMaterial( {map: tex } );\n        this.texture = tex;\n        this.textureCircle = new THREE.Mesh( geo, mat );\n      })\n    }\n\n    //set back circle\n    {\n      let arcGen : THREE.EllipseCurve = new THREE.EllipseCurve(\n        0, 0,\n        radius+30, radius+30,\n        0, Math.PI/4,\n        false,\n        0\n      );\n      let point2D : THREE.Vector2[] = arcGen.getPoints(60);\n      let point3D : THREE.Vector3[] = [];\n      for (let p of point2D) {\n        point3D.push(new THREE.Vector3(p.x, p.y, -5));\n      }\n      let meshLine = new AnimatedMeshLine(point3D, color, 0, 3, 0, 0);\n      let mesh : THREE.Mesh = meshLine.getMesh();\n      let mesh2 : THREE.Mesh = mesh.clone();\n      mesh2.rotateZ(Math.PI);\n      this.backCircle = new THREE.Object3D();\n      this.backCircle.add(mesh);\n      this.backCircle.add(mesh2);\n      this.backCircle.rotateZ(Math.random()*Math.PI);\n      this.backCircle.layers.set(LAYER.PLANE);\n    }\n\n    //set front circle\n    {\n      let obj : THREE.Object3D = new THREE.Object3D();\n      let arcGen : THREE.EllipseCurve = new THREE.EllipseCurve(\n        0, 0,\n        radius+10, radius+10,\n        0, Math.PI*2,\n        false,\n        0\n      );\n      let point2D : THREE.Vector2[] = arcGen.getPoints(60);\n      let point3D : THREE.Vector3[] = [];\n      for (let p of point2D) {\n        point3D.push(new THREE.Vector3(p.x, p.y, 0));\n      }\n      let geo : THREE.BufferGeometry = new THREE.BufferGeometry().setFromPoints(point3D);\n      let mat : THREE.Material = new THREE.LineBasicMaterial( {color: color} );\n      let arc : THREE.Line = new THREE.Line( geo, mat );\n      obj.add(arc);\n      let div = 60;\n      for (let i = 0; i < div; i++) {\n        let dr = (i%5==0)?radius/16:radius/32;\n        let points : THREE.Vector3[] = [\n          new THREE.Vector3((radius-dr+10)*Math.cos(i*2*Math.PI/div), (radius-dr+10)*Math.sin(i*2*Math.PI/div), 0),\n          new THREE.Vector3((radius+dr+10)*Math.cos(i*2*Math.PI/div), (radius+dr+10)*Math.sin(i*2*Math.PI/div), 0)\n        ];\n        geo = new THREE.BufferGeometry().setFromPoints(points);\n        let line : THREE.Line = new THREE.Line( geo, mat );\n        obj.add(line);\n      }\n      this.frontCircle = obj;\n      this.frontCircle.layers.set(LAYER.PLANE);\n    }\n  }\n  getTextureCircle() : THREE.Mesh | null {\n    if (this.textureCircle !== undefined) {\n      this.textureCircle.position.x = this.position.x;\n      this.textureCircle.position.y = this.position.y;\n      this.textureCircle.position.z = this.position.z;\n      this.textureCircle.scale.x = this.getTextureScale();\n      this.textureCircle.scale.y = this.getTextureScale();\n      return this.textureCircle;\n    } else {\n      return null;\n    }\n  }\n  getBackCircle() : THREE.Object3D {\n    this.backCircle.position.x = this.position.x;\n    this.backCircle.position.y = this.position.y;\n    this.backCircle.position.z = this.position.z + 10;\n    this.backCircle.scale.x = this.getCircleScale()*this.getCircleScale();\n    this.backCircle.scale.y = this.getCircleScale()*this.getCircleScale();\n    return this.backCircle;\n  }\n  getFrontCircle() : THREE.Object3D {\n    this.frontCircle.position.x = this.position.x;\n    this.frontCircle.position.y = this.position.y;\n    this.frontCircle.position.z = this.position.z+20;\n    this.frontCircle.scale.x = this.getCircleScale();\n    this.frontCircle.scale.y = this.getCircleScale();\n    return this.frontCircle;\n  }\n  getObject() : THREE.Object3D {\n    let group : THREE.Object3D = new THREE.Object3D();\n    let mesh : THREE.Mesh | null = this.getTextureCircle();\n    if (mesh !== null) {\n      group.add(mesh);\n    }\n    group.add(this.getFrontCircle());\n    group.add(this.getBackCircle());\n    return group;\n  }\n  setPosition(position : THREE.Vector3) {\n    this.position = position;\n  }\n  getTextureScale() : number {\n    return 1 - 0.05 * Math.pow(this.scale_t, 1.5);\n  }\n  getCircleScale() : number {\n    return 1 + 0.1 * Math.pow(this.scale_t, 1.5);\n  }\n  getRadius() : number {\n    return this.defaultRadius * this.getTextureScale();\n  }\n  expand() {\n    if (this.scale_t <= 1) {\n      this.scale_t += Math.min(0.05, 1 - this.scale_t);\n    } else {\n      this.scale_t = 1;\n    }\n  }\n  shrink() {\n    if (this.scale_t >= 0) {\n      this.scale_t -= Math.min(0.05, this.scale_t);\n    } else {\n      this.scale_t = 0;\n    }\n  }\n  update() {\n    this.frontCircle.rotateZ(Math.PI/2000);\n    this.backCircle.rotateZ(-Math.PI/1000);\n  }\n}\n\nexport default Content;","import React from 'react';\nimport './App.css';\n// import Text from './Text';\n// import Loading from './Loading';\nimport Content from './Content';\n// import Background from './Background';\n\ninterface AppState {\n  boxes : HTMLElement[]\n  scrollY : number\n}\n\nclass App extends React.Component <{}, AppState> {\n  constructor() {\n    super({});\n    this.state = {\n      boxes: [],\n      scrollY : 0\n    };\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Content />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}