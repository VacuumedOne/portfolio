{"version":3,"sources":["Profile.tsx","Works.tsx","Links.tsx","jsm/shaders/CopyShader.js","jsm/postprocessing/Pass.js","jsm/postprocessing/ShaderPass.js","jsm/postprocessing/MaskPass.js","jsm/postprocessing/EffectComposer.js","jsm/postprocessing/RenderPass.js","jsm/shaders/LuminosityHighPassShader.js","jsm/postprocessing/UnrealBloomPass.js","Content.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Profile","react_default","a","createElement","className","React","Component","worksStyle","height","Works","style","Links","href","CopyShader","uniforms","tDiffuse","value","opacity","vertexShader","join","fragmentShader","Pass","this","enabled","needsSwap","clear","renderToScreen","Object","assign","prototype","setSize","render","console","error","FullScreenQuad","camera","OrthographicCamera","geometry","PlaneBufferGeometry","material","_mesh","Mesh","defineProperty","get","set","renderer","ShaderPass","shader","textureID","call","undefined","ShaderMaterial","UniformsUtils","clone","defines","fsQuad","create","constructor","writeBuffer","readBuffer","texture","setRenderTarget","autoClearColor","autoClearDepth","autoClearStencil","MaskPass","scene","inverse","writeValue","clearValue","context","getContext","state","buffers","color","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","EQUAL","KEEP","ClearMaskPass","EffectComposer","renderTarget","parameters","minFilter","LinearFilter","magFilter","format","RGBAFormat","stencilBuffer","size","getSize","Vector2","_pixelRatio","getPixelRatio","_width","width","_height","WebGLRenderTarget","name","renderTarget1","renderTarget2","passes","copyPass","clock","Clock","swapBuffers","tmp","addPass","pass","push","insertPass","index","splice","isLastEnabledPass","passIndex","i","length","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","NOTEQUAL","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","RenderPass","overrideMaterial","clearColor","clearAlpha","clearDepth","oldClearColor","oldClearAlpha","oldAutoClear","autoClear","getClearColor","getHex","getClearAlpha","setClearColor","LuminosityHighPassShader","shaderID","luminosityThreshold","smoothWidth","defaultColor","Color","defaultOpacity","UnrealBloomPass","resolution","strength","radius","threshold","x","y","pars","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","Math","round","resy","renderTargetBright","generateMipmaps","renderTargetHorizonal","renderTargetVertical","highPassShader","highPassUniforms","materialHighPassFilter","separableBlurMaterials","kernelSizeArray","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomTintColors","Vector3","copyShader","copyUniforms","materialCopy","blending","AdditiveBlending","depthTest","depthWrite","transparent","basic","MeshBasicMaterial","copy","map","inputRenderTarget","BlurDirectionX","BlurDirectionY","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","direction","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","dirtTexture","bloomStrength","bloomFactors","bloomRadius","container","pointLight","composer","raycaster","mouse","THREE","rime","wNum","wonderStart","workN","circleR","titlePad","window","innerWidth","pad","params","exposure","bloomThreshold","LAYER","NO_POSTPROCESS","BLOOM","Content","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","handleDialogClose","setState","isDialogOpen","componentDidMount","setupCanvas","componentDidUpdate","box","defaultScrollY","scrollY","boxes","document","getElementById","antialias","devicePixelRatio","innerHeight","toneMapping","appendChild","domElement","boxM","boxLines","_i","_boxes","rect","getBoundingClientRect","boxG","vertices","Float32Array","left","top","right","bottom","addAttribute","line","position","layers","works","Array","worksRect","origin","range","Work","w","wonderLine","animate","aspect","dist","tan","fov","PI","z","add","_i4","_boxLines","boxLine","work","d","dx","dy","floor","pos","setPosition","mesh","getTextureCircle","backCircle","getFrontCircle","getBackCircle","update","getLine","setFromCamera","intersects","intersectObjects","children","log","renderScene","bloomPass","requestAnimationFrame","onWindowResize","e","forceUpdate","onMouseMove","clientX","clientY","addEventListener","id","src_Profile_0","src_Works","src_Links","Dialog","open","onClose","DialogTitle","DialogContent","src","Button","onClick","center","eps","theta","r","points","mvR","dr","dtheta","rev","random","alive","min","cos","sin","setFromPoints","_this2","textureCircle","frontCircle","backDiff","load","tex","geo","mat","point2D","getPoints","point3D","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","p","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","App","src_Content_0","Boolean","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0fae7b73.chunk.js","sourcesContent":["import React from 'react';\nimport './Profile.css'\n\nclass Profile extends React.Component {\n  render() {\n    return (\n      <div className=\"text\">\n        <div className=\"title\">Profile</div>\n        <div className=\"detail\">\n          <div><b>Nocks_on</b>と申します。<b>のくそん</b>と読みます。</div>\n          <br />\n          <div>好きなこと:\n            <div>ゲーム、VRが好きです。今までの人生で一番好きなゲームは『カービィのエアライド』です。最近OculusQuestを買ってVRを楽しんでします。</div>\n          </div>\n          <br />\n          <div>やったこと: \n            <li>Webアプリ開発</li>\n            <li>短いゲーム開発</li>\n            <li>シェーダなどのビジュアルプログラミング</li>\n            <li>動画編集など</li>\n          </div>\n          <br />\n          <div>言語について:\n            <li>よく使う: C++、JavaScript</li>\n            <li>そこそこ使っている: GLSL</li>\n            <li>使える: Java, Python, Swift, Ruby, PHP, HTML/CSS</li>\n            <li>興味がある: Haskell</li>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Profile;","import React from 'react';\nimport './Profile.css'\n\nlet worksStyle : React.CSSProperties = {\n  height: '500px'\n}\n\nclass Works extends React.Component {\n  render() {\n    return (\n      <div className=\"text\">\n        <div className=\"title\">Works / Activities</div>\n        <div>仮設です。制作物をまとめる場所にする予定です。Three.jsと奮闘中(2019/8/29現在)。</div>\n        <div className=\"detail\" style={worksStyle}>\n          \n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Works;","import React from 'react';\nimport './Profile.css'\n\nclass Links extends React.Component {\n  render() {\n    return (\n      <div className=\"text\">\n        <div className=\"title\">Links</div>\n        <div className=\"detail\">\n          <li>Github: <a href=\"https://github.com/VacuumedOne\">VacuumedOne</a></li>\n          <li>Twitter: <a href=\"https://twitter.com/nocks_on\">のくそん</a></li>\n          <li>Shadertoy: <a href=\"https://www.shadertoy.com/profile?show=shaders\">Nocks_on</a></li>\n          <li>OpenProcessing: <a href=\"https://www.openprocessing.org/user/181939\">Nocks_on</a></li>\n          <li>はてなブログ: </li>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Links;","/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Full-screen textured quad shader\n */\n\n\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"opacity\":  { value: 1.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vUv = uv;\",\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform float opacity;\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vec4 texel = texture2D( tDiffuse, vUv );\",\n\t\t\t\"gl_FragColor = opacity * texel;\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { CopyShader };\n","import {\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tMesh\n} from \"three\";\n\nfunction Pass() {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n}\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { Pass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tShaderMaterial,\n\tUniformsUtils\n} from \"three\";\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar ShaderPass = function ( shader, textureID ) {\n\n\tPass.call( this );\n\n\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\n\n\tif ( shader instanceof ShaderMaterial ) {\n\n\t\tthis.uniforms = shader.uniforms;\n\n\t\tthis.material = shader;\n\n\t} else if ( shader ) {\n\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t}\n\n\tthis.fsQuad = new Pass.FullScreenQuad( this.material );\n\n};\n\nShaderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: ShaderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n} );\n\nexport { ShaderPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar MaskPass = function ( scene, camera ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.clear = true;\n\tthis.needsSwap = false;\n\n\tthis.inverse = false;\n\n};\n\nMaskPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: MaskPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar context = renderer.getContext();\n\t\tvar state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tvar writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n} );\n\n\nvar ClearMaskPass = function () {\n\n\tPass.call( this );\n\n\tthis.needsSwap = false;\n\n};\n\nClearMaskPass.prototype = Object.create( Pass.prototype );\n\nObject.assign( ClearMaskPass.prototype, {\n\n\trender: function ( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n} );\n\nexport { MaskPass, ClearMaskPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tClock,\n\tLinearFilter,\n\tMesh,\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tRGBAFormat,\n\tVector2,\n\tWebGLRenderTarget\n} from \"three\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"../postprocessing/ShaderPass.js\";\nimport { MaskPass } from \"../postprocessing/MaskPass.js\";\nimport { ClearMaskPass } from \"../postprocessing/MaskPass.js\";\n\nvar EffectComposer = function ( renderer, renderTarget ) {\n\n\tthis.renderer = renderer;\n\n\tif ( renderTarget === undefined ) {\n\n\t\tvar parameters = {\n\t\t\tminFilter: LinearFilter,\n\t\t\tmagFilter: LinearFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\tstencilBuffer: false\n\t\t};\n\n\t\tvar size = renderer.getSize( new Vector2() );\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\tthis._width = size.width;\n\t\tthis._height = size.height;\n\n\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t} else {\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = renderTarget.width;\n\t\tthis._height = renderTarget.height;\n\n\t}\n\n\tthis.renderTarget1 = renderTarget;\n\tthis.renderTarget2 = renderTarget.clone();\n\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\tthis.writeBuffer = this.renderTarget1;\n\tthis.readBuffer = this.renderTarget2;\n\n\tthis.renderToScreen = true;\n\n\tthis.passes = [];\n\n\t// dependencies\n\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t}\n\n\tif ( ShaderPass === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t}\n\n\tthis.copyPass = new ShaderPass( CopyShader );\n\n\tthis.clock = new Clock();\n\n};\n\nObject.assign( EffectComposer.prototype, {\n\n\tswapBuffers: function () {\n\n\t\tvar tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t},\n\n\taddPass: function ( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t},\n\n\tinsertPass: function ( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\n\t},\n\n\tisLastEnabledPass: function ( passIndex ) {\n\n\t\tfor ( var i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\trender: function ( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tvar maskActive = false;\n\n\t\tvar pass, i, il = this.passes.length;\n\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tpass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tvar context = this.renderer.getContext();\n\t\t\t\t\tvar stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t},\n\n\treset: function ( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tvar effectiveWidth = this._width * this._pixelRatio;\n\t\tvar effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t},\n\n\tsetPixelRatio: function ( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n} );\n\n\nvar Pass = function () {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n};\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { EffectComposer, Pass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.overrideMaterial = overrideMaterial;\n\n\tthis.clearColor = clearColor;\n\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\tthis.clear = true;\n\tthis.clearDepth = false;\n\tthis.needsSwap = false;\n\n};\n\nRenderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: RenderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\tvar oldClearColor, oldClearAlpha;\n\n\t\tif ( this.clearColor ) {\n\n\t\t\toldClearColor = renderer.getClearColor().getHex();\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = null;\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n} );\n\nexport { RenderPass };\n","/**\n * @author bhouston / http://clara.io/\n *\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nimport {\n\tColor\n} from \"three\";\n\nvar LuminosityHighPassShader = {\n\n\tshaderID: \"luminosityHighPass\",\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"luminosityThreshold\": { value: 1.0 },\n\t\t\"smoothWidth\": { value: 1.0 },\n\t\t\"defaultColor\": { value: new Color( 0x000000 ) },\n\t\t\"defaultOpacity\": { value: 0.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vUv = uv;\",\n\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join(\"\\n\"),\n\n\tfragmentShader: [\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform vec3 defaultColor;\",\n\t\t\"uniform float defaultOpacity;\",\n\t\t\"uniform float luminosityThreshold;\",\n\t\t\"uniform float smoothWidth;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vec4 texel = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\"vec3 luma = vec3( 0.299, 0.587, 0.114 );\",\n\n\t\t\t\"float v = dot( texel.xyz, luma );\",\n\n\t\t\t\"vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\",\n\n\t\t\t\"float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\",\n\n\t\t\t\"gl_FragColor = mix( outputColor, texel, alpha );\",\n\n\t\t\"}\"\n\n\t].join(\"\\n\")\n\n};\n\nexport { LuminosityHighPassShader };\n","/**\n * @author spidersharma / http://eduperiment.com/\n *\n * Inspired from Unreal Engine\n * https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\n */\n\nimport {\n\tAdditiveBlending,\n\tColor,\n\tLinearFilter,\n\tMeshBasicMaterial,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from \"three\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityHighPassShader } from \"../shaders/LuminosityHighPassShader.js\";\n\nvar UnrealBloomPass = function ( resolution, strength, radius, threshold ) {\n\n\tPass.call( this );\n\n\tthis.strength = ( strength !== undefined ) ? strength : 1;\n\tthis.radius = radius;\n\tthis.threshold = threshold;\n\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\t// create color only once here, reuse it later inside the render function\n\tthis.clearColor = new Color( 0, 0, 0 );\n\n\t// render targets\n\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\tthis.renderTargetsHorizontal = [];\n\tthis.renderTargetsVertical = [];\n\tthis.nMips = 5;\n\tvar resx = Math.round( this.resolution.x / 2 );\n\tvar resy = Math.round( this.resolution.y / 2 );\n\n\tthis.renderTargetBright = new WebGLRenderTarget( resx, resy, pars );\n\tthis.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n\tthis.renderTargetBright.texture.generateMipmaps = false;\n\n\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\tvar renderTargetHorizonal = new WebGLRenderTarget( resx, resy, pars );\n\n\t\trenderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n\t\trenderTargetHorizonal.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetsHorizontal.push( renderTargetHorizonal );\n\n\t\tvar renderTargetVertical = new WebGLRenderTarget( resx, resy, pars );\n\n\t\trenderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n\t\trenderTargetVertical.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetsVertical.push( renderTargetVertical );\n\n\t\tresx = Math.round( resx / 2 );\n\n\t\tresy = Math.round( resy / 2 );\n\n\t}\n\n\t// luminosity high pass material\n\n\tif ( LuminosityHighPassShader === undefined )\n\t\tconsole.error( \"UnrealBloomPass relies on LuminosityHighPassShader\" );\n\n\tvar highPassShader = LuminosityHighPassShader;\n\tthis.highPassUniforms = UniformsUtils.clone( highPassShader.uniforms );\n\n\tthis.highPassUniforms[ \"luminosityThreshold\" ].value = threshold;\n\tthis.highPassUniforms[ \"smoothWidth\" ].value = 0.01;\n\n\tthis.materialHighPassFilter = new ShaderMaterial( {\n\t\tuniforms: this.highPassUniforms,\n\t\tvertexShader: highPassShader.vertexShader,\n\t\tfragmentShader: highPassShader.fragmentShader,\n\t\tdefines: {}\n\t} );\n\n\t// Gaussian Blur Materials\n\tthis.separableBlurMaterials = [];\n\tvar kernelSizeArray = [ 3, 5, 7, 9, 11 ];\n\tvar resx = Math.round( this.resolution.x / 2 );\n\tvar resy = Math.round( this.resolution.y / 2 );\n\n\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\tthis.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );\n\n\t\tthis.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new Vector2( resx, resy );\n\n\t\tresx = Math.round( resx / 2 );\n\n\t\tresy = Math.round( resy / 2 );\n\n\t}\n\n\t// Composite material\n\tthis.compositeMaterial = this.getCompositeMaterial( this.nMips );\n\tthis.compositeMaterial.uniforms[ \"blurTexture1\" ].value = this.renderTargetsVertical[ 0 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture2\" ].value = this.renderTargetsVertical[ 1 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture3\" ].value = this.renderTargetsVertical[ 2 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture4\" ].value = this.renderTargetsVertical[ 3 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture5\" ].value = this.renderTargetsVertical[ 4 ].texture;\n\tthis.compositeMaterial.uniforms[ \"bloomStrength\" ].value = strength;\n\tthis.compositeMaterial.uniforms[ \"bloomRadius\" ].value = 0.1;\n\tthis.compositeMaterial.needsUpdate = true;\n\n\tvar bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\n\tthis.compositeMaterial.uniforms[ \"bloomFactors\" ].value = bloomFactors;\n\tthis.bloomTintColors = [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ),\n\t\t\t\t\t\t\t new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ];\n\tthis.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\n\n\t// copy material\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( \"UnrealBloomPass relies on CopyShader\" );\n\n\t}\n\n\tvar copyShader = CopyShader;\n\n\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\tthis.copyUniforms[ \"opacity\" ].value = 1.0;\n\n\tthis.materialCopy = new ShaderMaterial( {\n\t\tuniforms: this.copyUniforms,\n\t\tvertexShader: copyShader.vertexShader,\n\t\tfragmentShader: copyShader.fragmentShader,\n\t\tblending: AdditiveBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\ttransparent: true\n\t} );\n\n\tthis.enabled = true;\n\tthis.needsSwap = false;\n\n\tthis.oldClearColor = new Color();\n\tthis.oldClearAlpha = 1;\n\n\tthis.basic = new MeshBasicMaterial();\n\n\tthis.fsQuad = new Pass.FullScreenQuad( null );\n\n};\n\nUnrealBloomPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: UnrealBloomPass,\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( var i = 0; i < this.renderTargetsVertical.length; i ++ ) {\n\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\n\n\t\t}\n\n\t\tthis.renderTargetBright.dispose();\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tvar resx = Math.round( width / 2 );\n\t\tvar resy = Math.round( height / 2 );\n\n\t\tthis.renderTargetBright.setSize( resx, resy );\n\n\t\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new Vector2( resx, resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t},\n\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tthis.oldClearColor.copy( renderer.getClearColor() );\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor( this.clearColor, 0 );\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render input to screen\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.basic;\n\t\t\tthis.basic.map = readBuffer.texture;\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// 1. Extract Bright Areas\n\n\t\tthis.highPassUniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n\t\tthis.highPassUniforms[ \"luminosityThreshold\" ].value = this.threshold;\n\t\tthis.fsQuad.material = this.materialHighPassFilter;\n\n\t\trenderer.setRenderTarget( this.renderTargetBright );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// 2. Blur All the mips progressively\n\n\t\tvar inputRenderTarget = this.renderTargetBright;\n\n\t\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.fsQuad.material = this.separableBlurMaterials[ i ];\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = inputRenderTarget.texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = UnrealBloomPass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = this.renderTargetsHorizontal[ i ].texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = UnrealBloomPass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\n\n\t\t}\n\n\t\t// Composite All the mips\n\n\t\tthis.fsQuad.material = this.compositeMaterial;\n\t\tthis.compositeMaterial.uniforms[ \"bloomStrength\" ].value = this.strength;\n\t\tthis.compositeMaterial.uniforms[ \"bloomRadius\" ].value = this.radius;\n\t\tthis.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\n\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Blend it additively over the input texture\n\n\t\tthis.fsQuad.material = this.materialCopy;\n\t\tthis.copyUniforms[ \"tDiffuse\" ].value = this.renderTargetsHorizontal[ 0 ].texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Restore renderer settings\n\n\t\trenderer.setClearColor( this.oldClearColor, this.oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t},\n\n\tgetSeperableBlurMaterial: function ( kernelRadius ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t\"KERNEL_RADIUS\": kernelRadius,\n\t\t\t\t\"SIGMA\": kernelRadius\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"colorTexture\": { value: null },\n\t\t\t\t\"texSize\": { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t\"direction\": { value: new Vector2( 0.5, 0.5 ) }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"#include <common>\\\n\t\t\t\tvarying vec2 vUv;\\n\\\n\t\t\t\tuniform sampler2D colorTexture;\\n\\\n\t\t\t\tuniform vec2 texSize;\\\n\t\t\t\tuniform vec2 direction;\\\n\t\t\t\t\\\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\n\t\t\t\t}\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\n\t\t\t\t\tfloat fSigma = float(SIGMA);\\\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\\\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\\\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\\\n\t\t\t\t\t\tfloat x = float(i);\\\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\\\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\\\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\\\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\\\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\\\n\t\t\t\t\t\tweightSum += 2.0 * w;\\\n\t\t\t\t\t}\\\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\\n\\\n\t\t\t\t}\"\n\t\t} );\n\n\t},\n\n\tgetCompositeMaterial: function ( nMips ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t\"NUM_MIPS\": nMips\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"blurTexture1\": { value: null },\n\t\t\t\t\"blurTexture2\": { value: null },\n\t\t\t\t\"blurTexture3\": { value: null },\n\t\t\t\t\"blurTexture4\": { value: null },\n\t\t\t\t\"blurTexture5\": { value: null },\n\t\t\t\t\"dirtTexture\": { value: null },\n\t\t\t\t\"bloomStrength\": { value: 1.0 },\n\t\t\t\t\"bloomFactors\": { value: null },\n\t\t\t\t\"bloomTintColors\": { value: null },\n\t\t\t\t\"bloomRadius\": { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"varying vec2 vUv;\\\n\t\t\t\tuniform sampler2D blurTexture1;\\\n\t\t\t\tuniform sampler2D blurTexture2;\\\n\t\t\t\tuniform sampler2D blurTexture3;\\\n\t\t\t\tuniform sampler2D blurTexture4;\\\n\t\t\t\tuniform sampler2D blurTexture5;\\\n\t\t\t\tuniform sampler2D dirtTexture;\\\n\t\t\t\tuniform float bloomStrength;\\\n\t\t\t\tuniform float bloomRadius;\\\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\\\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\\\n\t\t\t\t\\\n\t\t\t\tfloat lerpBloomFactor(const in float factor) { \\\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\\\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\\\n\t\t\t\t}\\\n\t\t\t\t\\\n\t\t\t\tvoid main() {\\\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\\\n\t\t\t\t}\"\n\t\t} );\n\n\t}\n\n} );\n\nUnrealBloomPass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nUnrealBloomPass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { UnrealBloomPass };\n","import React from 'react';\nimport Profile from './Profile';\nimport Works from './Works';\nimport Links from './Links';\nimport './Content.css';\n\nimport * as THREE from 'three';\n\nimport { EffectComposer } from './jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from './jsm/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from './jsm/postprocessing/UnrealBloomPass.js';\n\nimport { Dialog, DialogTitle, DialogContent, Button } from '@material-ui/core';\n\ninterface ContentState {\n  isDialogOpen : boolean\n}\n\ninterface BloomParam {\n  exposure: number,\n  bloomStrength: number,\n  bloomThreshold: number,\n  bloomRadius: number\n}\n\nlet container : HTMLElement | null;\nlet scene : THREE.Scene;\nlet pointLight : THREE.PointLight;\nlet renderer : THREE.WebGLRenderer;\nlet camera : THREE.PerspectiveCamera;\nlet composer : EffectComposer;\nlet raycaster : THREE.Raycaster;\nlet mouse : THREE.Vector2 = new THREE.Vector2(0,0);\n\n//color\nlet rime : number = 0x00FF00;\n\n//wonderLine\nlet wNum : number = 5;\nlet wonderStart : boolean = false;\n\n//works\nlet workN = 3;\nlet circleR = 100;\nlet titlePad = (window.innerWidth <= 600) ? 150 : 75; //[Works/Activities]の文字分のパディング\nlet pad = circleR + 50;\n\nlet params : BloomParam = {\n  exposure: 1,\n  bloomStrength: 2,\n  bloomThreshold: 0,\n  bloomRadius: 0\n};\n\nlet LAYER = {\n  NO_POSTPROCESS: 0,\n  BLOOM: 1\n};\n\nclass Content extends React.Component<{}, ContentState> {\n  constructor() {\n    super({});\n    this.state = {isDialogOpen : false}\n    window.addEventListener('resize', this.onWindowResize, false);\n    window.addEventListener('mousemove', this.onMouseMove, false);\n    // this.handleDialogClose = this.handleDialogClose.bind(this);\n  }\n  render() {\n    return (\n      <div id=\"content\">\n        <div className=\"layer1\">\n          <div id=\"background\"></div>\n        </div>\n        <div className=\"layer2\">\n          <div className=\"header\">Portfolio / Nocks_on</div>\n          <div className=\"body\">\n            <div className=\"item\" id=\"box1\">\n              <Profile />\n            </div>\n            <div className=\"item\" id=\"box2\">\n              <Works />\n            </div>\n            <div className=\"item\" id=\"box3\">\n              <Links />\n            </div>\n          </div>\n          <Dialog open={this.state.isDialogOpen} onClose={this.handleDialogClose}>\n            <DialogTitle>Work</DialogTitle>\n            <DialogContent>\n              <img src=\"texture/work0.png\"></img>\n              <div>JavaScript始めたての頃に作った3時間ゲーム制作の作品です。素のHTMLCanvasです。</div>\n            </DialogContent>\n            <Button onClick={this.handleDialogClose} color=\"primary\">Close</Button>\n          </Dialog>\n        </div>\n      </div>\n    )\n  }\n  handleDialogClose = () => {\n    this.setState({\n      isDialogOpen : true\n    });\n  }\n  componentDidMount = () => {\n    this.setupCanvas();\n  }\n  componentDidUpdate = () => {\n    this.setupCanvas();\n  }\n  setupCanvas = () => {\n    let defaultScrollY = window.scrollY;\n    let boxes : HTMLElement[] = [];\n    let box : HTMLElement | null;\n    for (let i = 1; i <= 3; i++) {\n      box = document.getElementById('box' + i);\n      if (box !== null) {\n        boxes.push(box);\n      }\n    }\n    if (boxes.length !== 3) {\n      return;\n    }\n\n    container = document.getElementById('background');\n    if (container == null) {\n      return;\n    }\n\n    renderer = new THREE.WebGLRenderer( {antialias: true} );\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.toneMapping = THREE.ReinhardToneMapping;\n    renderer.autoClear = false;\n    container.appendChild( renderer.domElement );\n\n    //Boxes\n    let boxM : THREE.LineBasicMaterial = new THREE.LineBasicMaterial( {color: rime} );\n    let boxLines : THREE.Line[] = [];\n    for (let box of boxes) {\n      let rect : ClientRect | DOMRect = box.getBoundingClientRect();\n      let boxG : THREE.BufferGeometry = new THREE.BufferGeometry();\n      let vertices : Float32Array = new Float32Array([\n        rect.left, -rect.top, 0,\n        rect.right, -rect.top, 0,\n        rect.right, -rect.bottom, 0,\n        rect.left, -rect.bottom, 0,\n        rect.left, -rect.top, 0,\n      ]);\n      boxG.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\n      let line : THREE.Line = new THREE.Line(boxG, boxM);\n      line.position.x = -window.innerWidth/2;\n      line.position.y = window.innerHeight/2 - defaultScrollY;\n      line.layers.set(LAYER.BLOOM);\n      boxLines.push(line);\n    }\n\n    //Works\n    let works : (Work | undefined)[] = new Array(workN);\n    let worksRect : ClientRect | DOMRect = boxes[1].getBoundingClientRect();\n    let origin : THREE.Vector3 = new THREE.Vector3(\n      -window.innerWidth/2 + worksRect.left + pad,\n      window.innerHeight/2 - worksRect.top - defaultScrollY - pad - titlePad,\n      0);\n    let range : number = worksRect.width - 2 * pad;\n    let step : number = 300;\n\n    for(let i = 0; i <= workN; i++) {\n      works[i] = new Work('texture/work' + i + '.png', circleR, rime);\n    }\n\n    //wonder\n    let w : wonderLine[] = [];\n    for (let i = 0; i < wNum; i++) {\n      w.push(new wonderLine(new THREE.Vector2(0, 0), rime));\n    }\n\n    //Cube\n    // let cube : THREE.Mesh;\n    // {\n    //   let geo : THREE.BoxGeometry = new THREE.BoxGeometry(100, 100, 100);\n    //   let mat : THREE.MeshBasicMaterial = new THREE.MeshBasicMaterial( {color: rime} );\n    //   cube = new THREE.Mesh(geo, mat);\n    // }\n\n    const animate = () => {\n      scene = new THREE.Scene();\n\n      let fov : number = 60;\n      let aspect : number = window.innerWidth / window.innerHeight;\n      let dist : number = (window.innerHeight/2) / Math.tan((fov/2)*Math.PI/180);\n      camera = new THREE.PerspectiveCamera(fov, aspect, 0.1, 1000);\n      camera.position.z = dist;\n      camera.position.y = -window.scrollY;\n      scene.add(camera);\n      \n      scene.add( new THREE.AmbientLight(0x404040) );\n\n      pointLight = new THREE.PointLight(0xffffff, 1);\n      camera.add(pointLight);\n\n      for (let boxLine of boxLines) {\n        scene.add(boxLine);\n      }\n\n      for (let i = 0; i < workN; i++) {\n        let work : Work | undefined = works[i];\n        if (work !== undefined) {\n          let d : number = i * step;\n          let dx : number = (d % range);\n          let dy : number = i * circleR + Math.floor(d / range) * circleR;\n          let pos : THREE.Vector3 = new THREE.Vector3(origin.x + dx, origin.y - dy, 0);\n          work.setPosition(pos);\n          let mesh : THREE.Mesh | null = work.getTextureCircle();\n          let frontCircle : THREE.Line = work.getFrontCircle();\n          let backCircle : THREE.Line = work.getBackCircle();\n          scene.add(backCircle);\n          if (mesh !== null) {\n            scene.add(mesh);\n          }\n          // scene.add(frontCircle);\n        }\n      }\n\n      if (wonderStart) {\n        for (let i = 0; i < wNum; i++) {\n          w[i].update();\n          scene.add(w[i].getLine());\n        }\n      }\n\n      raycaster = new THREE.Raycaster();\n      raycaster.setFromCamera( mouse, camera );\n      let intersects : THREE.Intersection[] | null = raycaster.intersectObjects(scene.children);\n      console.log(intersects.length);\n      // for (let intersect of intersects) {\n      //   intersect.object.scale.x = 3;\n      //   intersect.object.scale.y = 3;\n      // }\n\n      //Post Process\n      var renderScene = new RenderPass( scene, camera );\n      var bloomPass = new UnrealBloomPass( new THREE.Vector2( window.innerWidth, window.innerHeight ), 1.5, 0.4, 0.85 );\n      bloomPass.threshold = params.bloomThreshold;\n      bloomPass.strength = params.bloomStrength;\n      bloomPass.radius = params.bloomRadius;\n\n      composer = new EffectComposer( renderer );\n      composer.addPass( renderScene );\n      // composer.addPass( bloomPass );\n\n      requestAnimationFrame(animate);\n\n      camera.layers.set(LAYER.BLOOM);\n      composer.render();\n      renderer.clearDepth();\n      camera.layers.set(LAYER.NO_POSTPROCESS);\n      renderer.render(scene, camera);\n    }\n\n    animate();\n  }\n  onWindowResize = (e : UIEvent) => {\n    this.forceUpdate(() => (console.log('re render')));\n  }\n  onMouseMove = (e : MouseEvent) => {\n    mouse.x = e.clientX - window.innerWidth/2;\n    mouse.y = -e.clientY + window.innerHeight/2;\n  }\n}\n\nclass wonderLine {\n  eps : number = 0.0001;\n  center : THREE.Vector2;\n  color : number;\n  theta: number;\n  r : number;\n  points : THREE.Vector3[] = [];\n  mvR : boolean;\n  dr : number = 0;\n  dtheta : number = 0;\n  rev : number = (Math.random() > 0.5)?-1:1;\n  alive: boolean = true;\n  constructor(center : THREE.Vector2, color: number) {\n    this.center = center;\n    this.color = color;\n    this.theta = Math.PI*2*Math.random();\n    this.r = 0;\n    this.points.push(new THREE.Vector3(this.center.x, this.center.y, 0));\n    this.mvR = true;\n    this.dr = 0.5 + Math.random();\n  }\n  update() : void {\n    if (!this.alive) {\n      return;\n    } else {\n      if (this.r > 50) {\n        this.alive = false;\n      }\n    }\n    if (this.mvR) {\n      if (this.dr <= this.eps) {\n        this.mvR = !this.mvR;\n        this.dtheta = Math.PI/8 + Math.PI*Math.random();\n      } else {\n        let d = Math.min(this.dr, 0.2);\n        this.dr -= d;\n        this.r += d;\n        this.points.push(new THREE.Vector3(\n          this.center.x + this.r*Math.cos(this.theta), \n          this.center.y + this.r*Math.sin(this.theta), \n          0));\n      }\n    } else {\n      if (this.dtheta <= this.eps) {\n        this.mvR = !this.mvR;\n        this.dr = 0.5 + Math.random();\n      } else {\n        let d = Math.min(this.dtheta, Math.PI/100 * this.r);\n        this.dtheta -= d;\n        this.theta += d*this.rev;\n        this.points.push(new THREE.Vector3(\n          this.center.x + this.r*Math.cos(this.theta), \n          this.center.y + this.r*Math.sin(this.theta), \n          0));\n      }\n    }\n  }\n  getLine() : THREE.Line {\n    let geometry : THREE.BufferGeometry = new THREE.BufferGeometry().setFromPoints(this.points);\n    let material : THREE.Material = new THREE.LineBasicMaterial( {color: this.color} );\n    let line : THREE.Line = new THREE.Line(geometry, material);\n    return line\n  }\n}\n\nclass Work {\n  texture : THREE.Texture | undefined;\n  textureCircle : THREE.Mesh | undefined;\n  backCircle : THREE.Line;\n  frontCircle : THREE.Line;\n  backDiff : THREE.Vector3;\n  position : THREE.Vector3 = new THREE.Vector3(0,0,0);\n  constructor(src : string, radius : number, color: number) {\n    //set texture circle\n    {\n      new THREE.TextureLoader().load(src, (tex) => {\n        let geo : THREE.CircleGeometry = new THREE.CircleGeometry(radius, 60);\n        let mat : THREE.MeshBasicMaterial = new THREE.MeshBasicMaterial( {map: tex } );\n        this.texture = tex;\n        this.textureCircle = new THREE.Mesh( geo, mat );\n      })\n    }\n\n    //set back circle\n    {\n      let arcGen : THREE.EllipseCurve = new THREE.EllipseCurve(\n        0, 0,\n        radius+10, radius+10,\n        0, Math.PI*2,\n        false,\n        0\n      );\n      let point2D : THREE.Vector2[] = arcGen.getPoints(60);\n      let point3D : THREE.Vector3[] = [];\n      for (let p of point2D) {\n        point3D.push(new THREE.Vector3(p.x, p.y, -5));\n      }\n      let geo : THREE.BufferGeometry = new THREE.BufferGeometry().setFromPoints(point3D);\n      let mat : THREE.Material = new THREE.LineBasicMaterial( {color: color} );\n      this.backCircle = new THREE.Line( geo, mat );\n      this.backCircle.layers.set(LAYER.BLOOM);\n      this.backDiff = new THREE.Vector3(10*(Math.random()*2-1), 10*(Math.random()*2-1), -10);\n    }\n\n    //set front circle\n    {\n      let arcGen : THREE.EllipseCurve = new THREE.EllipseCurve(\n        0, 0,\n        radius-10, radius-10,\n        0, Math.PI,\n        false,\n        0\n      );\n      let point2D : THREE.Vector2[] = arcGen.getPoints(60);\n      let point3D : THREE.Vector3[] = [];\n      for (let p of point2D) {\n        point3D.push(new THREE.Vector3(p.x, p.y, 0));\n      }\n      let geo : THREE.BufferGeometry = new THREE.BufferGeometry().setFromPoints(point3D);\n      let mat : THREE.Material = new THREE.LineBasicMaterial( {color: color} );\n      this.frontCircle = new THREE.Line( geo, mat );\n      this.frontCircle.layers.set(LAYER.BLOOM);\n    }\n  }\n  getTextureCircle() : THREE.Mesh | null {\n    if (this.textureCircle !== undefined) {\n      this.textureCircle.position.x = this.position.x;\n      this.textureCircle.position.y = this.position.y;\n      this.textureCircle.position.z = this.position.z;\n      return this.textureCircle;\n    } else {\n      return null;\n    }\n  }\n  getBackCircle() : THREE.Line {\n    this.backCircle.position.x = this.position.x + this.backDiff.x;\n    this.backCircle.position.y = this.position.y + this.backDiff.y;\n    this.backCircle.position.z = this.position.z + this.backDiff.z;\n    return this.backCircle;\n  }\n  getFrontCircle() : THREE.Line {\n    this.frontCircle.position.x = this.position.x;\n    this.frontCircle.position.y = this.position.y;\n    this.frontCircle.position.z = this.position.z;\n    return this.frontCircle;\n  }\n  setPosition(position : THREE.Vector3) {\n    this.position = position;\n  }\n  update() {\n\n  }\n}\n\nexport default Content;","import React from 'react';\nimport './App.css';\n// import Text from './Text';\nimport Loading from './Loading';\nimport Content from './Content';\n// import Background from './Background';\n\ninterface AppState {\n  boxes : HTMLElement[]\n  scrollY : number\n}\n\nclass App extends React.Component <{}, AppState> {\n  constructor() {\n    super({});\n    this.state = {\n      boxes: [],\n      scrollY : 0\n    };\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Content />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}